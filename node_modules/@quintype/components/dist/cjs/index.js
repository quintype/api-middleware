'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/classCallCheck'));
var _createClass = _interopDefault(require('@babel/runtime/helpers/createClass'));
var _possibleConstructorReturn = _interopDefault(require('@babel/runtime/helpers/possibleConstructorReturn'));
var _getPrototypeOf = _interopDefault(require('@babel/runtime/helpers/getPrototypeOf'));
var _inherits = _interopDefault(require('@babel/runtime/helpers/inherits'));
var React = require('react');
var React__default = _interopDefault(React);
var reactRedux = require('react-redux');
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var get = _interopDefault(require('lodash/get'));
var wretch = _interopDefault(require('wretch'));
var reactDfp = require('react-dfp');
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var _toConsumableArray = _interopDefault(require('@babel/runtime/helpers/toConsumableArray'));
var _objectSpread = _interopDefault(require('@babel/runtime/helpers/objectSpread'));
var _slicedToArray = _interopDefault(require('@babel/runtime/helpers/slicedToArray'));
var PropTypes = require('prop-types');
var PropTypes__default = _interopDefault(PropTypes);
var quintypeJs = require('quintype-js');
var emptyWebGif = _interopDefault(require('empty-web-gif'));
var _assertThisInitialized = _interopDefault(require('@babel/runtime/helpers/assertThisInitialized'));
var classNames = _interopDefault(require('classnames'));
var atob = _interopDefault(require('atob'));
var getYouTubeID = _interopDefault(require('get-youtube-id'));
var _regeneratorRuntime = _interopDefault(require('@babel/runtime/regenerator'));
var _asyncToGenerator = _interopDefault(require('@babel/runtime/helpers/asyncToGenerator'));

var NAVIGATE_TO_PAGE = 'QT-NAVIGATE';
var BREAKING_NEWS_UPDATED = 'QT-BREAKING_NEWS_UPDATED';
var CLIENT_SIDE_RENDERED = 'QT-CLIENT_SIDE_RENDERED';
var PAGE_LOADING = 'QT-PAGE_LOADING';
var PAGE_FINISHED_LOADING = 'QT-PAGE_FINISHED_LOADING';
var HAMBURGER_CLICKED = 'QT-HAMBURGER_CLICKED';
var HAMBURGER_CLOSED = 'QT-HAMBURGER_CLOSED';
var SERVICE_WORKER_UPDATED = 'QT-SERVICE_WORKER_UPDATED';
var MEMBER_UPDATED = 'QT-MEMBER_UPDATED';
var MEMBER_BEING_LOADED = 'QT-MEMBER_BEING_LOADED';
var SUBSCRIPTION_GROUP_UPDATED = 'QT-SUBSCRIPTION_UPDATED';
var PAYMENT_OPTIONS_UPDATED = 'QT-PAYMENT_OPTIONS_UPDATED';
var ACCESS_BEING_LOADED = 'QT-ACCESS_BEING_LOADED';
var ACCESS_UPDATED = 'QT-ACCESS_UPDATED';
var METER_UPDATED = 'QT-METER_UPDATED';

function preventDefaultImpl(e) {
  e.preventDefault();
  e.stopPropagation();
}

function LinkBase(_ref) {
  var navigateToImpl = _ref.navigateToImpl,
      externalLink = _ref.externalLink,
      callback = _ref.callback,
      href = _ref.href,
      currentHostUrl = _ref.currentHostUrl,
      _ref$navigateTo = _ref.navigateTo,
      navigateTo = _ref$navigateTo === void 0 ? navigateToImpl : _ref$navigateTo,
      _ref$preventDefault = _ref.preventDefault,
      preventDefault = _ref$preventDefault === void 0 ? preventDefaultImpl : _ref$preventDefault,
      _ref$disableAjaxLinks = _ref.disableAjaxLinks,
      disableAjaxLinks = _ref$disableAjaxLinks === void 0 ? global.disableAjaxLinks || global.disableAjaxNavigation : _ref$disableAjaxLinks,
      otherProps = _objectWithoutProperties(_ref, ["navigateToImpl", "externalLink", "callback", "href", "currentHostUrl", "navigateTo", "preventDefault", "disableAjaxLinks"]);

  return React__default.createElement("a", Object.assign(otherProps, {
    href: href,
    onClick: function onClick(e) {
      if (disableAjaxLinks || e.ctrlKey || e.metaKey || e.shiftKey) {
        return;
      }

      var relativeLink = href.startsWith(currentHostUrl) ? href.replace(currentHostUrl, "") : href;

      if (!relativeLink.startsWith("/")) {
        return;
      }

      preventDefault(e);

      if (externalLink) {
        global.open(externalLink, "_blank");
      } else {
        navigateTo(relativeLink);
      }

      typeof callback === 'function' && callback(e);
    }
  }));
}

function mapStateToProps(state) {
  return {
    currentHostUrl: state.qt && state.qt.currentHostUrl
  };
}

function mapDispatchToProps(dispatch) {
  return {
    navigateToImpl: function navigateToImpl(url) {
      global.app.navigateToPage(dispatch, url);
    }
  };
}

var Link =
/*#__PURE__*/
reactRedux.connect(mapStateToProps, mapDispatchToProps)(LinkBase);

var apiClient =
/*#__PURE__*/
wretch().options({
  credentials: 'same-origin'
});
function getRequest(url, params) {
  var client = apiClient.url(url);
  if (params) client = client.query(params);
  return client.get();
}
function postRequest(url, body) {
  return apiClient.url(url).post(body);
}

var BreakingNewsBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(BreakingNewsBase, _React$Component);

  function BreakingNewsBase() {
    _classCallCheck(this, BreakingNewsBase);

    return _possibleConstructorReturn(this, _getPrototypeOf(BreakingNewsBase).apply(this, arguments));
  }

  _createClass(BreakingNewsBase, [{
    key: "render",
    value: function render() {
      return React__default.createElement(this.props.view, this.props);
    }
  }, {
    key: "updateBreakingNews",
    value: function updateBreakingNews() {
      var _this = this;

      getRequest('/api/v1/breaking-news').json(function (response) {
        return _this.props.breakingNewsUpdated(response.stories);
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.interval = global.setInterval(function () {
        return _this2.updateBreakingNews();
      }, this.props.updateInterval || 60000);
      this.updateBreakingNews();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      global.clearInterval(this.interval);
    }
  }]);

  return BreakingNewsBase;
}(React__default.Component);

function mapStateToProps$1(state) {
  return {
    config: state.qt.config || {},
    breakingNews: state.breakingNews || [],
    breakingNewsLoaded: state.breakingNewsLoaded || false
  };
}

function mapDispatchToProps$1(dispatch) {
  return {
    breakingNewsUpdated: function breakingNewsUpdated(stories) {
      return dispatch({
        type: BREAKING_NEWS_UPDATED,
        stories: stories
      });
    }
  };
}

var BreakingNews =
/*#__PURE__*/
reactRedux.connect(mapStateToProps$1, mapDispatchToProps$1)(BreakingNewsBase);
function BreakingNewsItem(_ref) {
  var item = _ref.item,
      className = _ref.className;
  var linkedStorySlug = get(item, ['metadata', 'linked-story-slug']);

  if (linkedStorySlug) {
    return React__default.createElement(Link, {
      className: className,
      href: "/".concat(linkedStorySlug)
    }, item.headline);
  } else {
    return React__default.createElement("span", {
      className: className
    }, item.headline);
  }
}

var ClientSideOnlyBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ClientSideOnlyBase, _React$Component);

  function ClientSideOnlyBase() {
    _classCallCheck(this, ClientSideOnlyBase);

    return _possibleConstructorReturn(this, _getPrototypeOf(ClientSideOnlyBase).apply(this, arguments));
  }

  _createClass(ClientSideOnlyBase, [{
    key: "render",
    value: function render() {
      if (this.props.clientSideRendered) {
        return React__default.createElement("div", {
          className: "client-side-only client-side-only-client"
        }, this.props.children);
      } else {
        return React__default.createElement(this.props.serverComponent || "div", Object.assign({
          className: "client-side-only client-side-only-server"
        }, this.props));
      }
    }
  }]);

  return ClientSideOnlyBase;
}(React__default.Component);

function WithClientSideOnlyBase(_ref) {
  var _ref$clientSideRender = _ref.clientSideRendered,
      clientSideRendered = _ref$clientSideRender === void 0 ? false : _ref$clientSideRender,
      children = _ref.children;
  return children({
    clientSideRendered: clientSideRendered
  });
}

function mapStateToProps$2(state) {
  return {
    clientSideRendered: state.clientSideRendered
  };
}

function mapDispatchToProps$2(dispatch) {
  return {};
}

var ClientSideOnly =
/*#__PURE__*/
reactRedux.connect(mapStateToProps$2, mapDispatchToProps$2)(ClientSideOnlyBase);
var WithClientSideOnly =
/*#__PURE__*/
reactRedux.connect(mapStateToProps$2, mapDispatchToProps$2)(WithClientSideOnlyBase);

function defaultErrorFn(props) {
  return React__default.createElement("span", {
    className: "qt-error"
  });
}

function withError(clazz) {
  var errorFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultErrorFn;
  return (
    /*#__PURE__*/
    function (_React$Component) {
      _inherits(WithError, _React$Component);

      function WithError(props) {
        var _this;

        _classCallCheck(this, WithError);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(WithError).call(this, props));
        _this.state = {
          errored: false
        };
        return _this;
      }

      _createClass(WithError, [{
        key: "componentDidCatch",
        value: function componentDidCatch(e) {
          console && e && console.log("Caught Exception: ".concat(e.message || e));
          this.setState({
            errored: true
          });
        }
      }, {
        key: "errorContent",
        value: function errorContent() {
          try {
            return errorFn(this.props);
          } catch (e) {
            return defaultErrorFn(this.props);
          }
        }
      }, {
        key: "render",
        value: function render() {
          if (this.state.errored) {
            return this.errorContent();
          } else {
            return React__default.createElement(clazz, this.props);
          }
        }
      }]);

      return WithError;
    }(React__default.Component)
  );
}

function DfpAdBase(_ref) {
  var defaultNetworkID = _ref.defaultNetworkID,
      config = _ref.config,
      collapseEmptyDivs = _ref.collapseEmptyDivs,
      targetingArguments = _ref.targetingArguments,
      adtype = _ref.adtype,
      lazyLoad = _ref.lazyLoad,
      singleRequest = _ref.singleRequest;
  var adConfig = config[adtype];
  return React__default.createElement(reactDfp.DFPSlotsProvider, {
    dfpNetworkId: defaultNetworkID,
    collapseEmptyDivs: collapseEmptyDivs,
    targetingArguments: targetingArguments,
    sizeMapping: adConfig.viewPortSizeMapping,
    lazyLoad: lazyLoad,
    singleRequest: singleRequest
  }, React__default.createElement(reactDfp.AdSlot, adConfig));
}

function createDfpAdComponent(_ref2) {
  var defaultNetworkID = _ref2.defaultNetworkID,
      config = _ref2.config,
      targeting = _ref2.targeting,
      _ref2$collapseEmptyDi = _ref2.collapseEmptyDivs,
      collapseEmptyDivs = _ref2$collapseEmptyDi === void 0 ? true : _ref2$collapseEmptyDi,
      _ref2$lazyLoad = _ref2.lazyLoad,
      lazyLoad = _ref2$lazyLoad === void 0 ? true : _ref2$lazyLoad,
      _ref2$singleRequest = _ref2.singleRequest,
      singleRequest = _ref2$singleRequest === void 0 ? false : _ref2$singleRequest;
  return reactRedux.connect(function (state) {
    return {
      targetingArguments: targeting(state),
      defaultNetworkID: defaultNetworkID,
      config: config,
      collapseEmptyDivs: collapseEmptyDivs,
      lazyLoad: lazyLoad,
      singleRequest: singleRequest
    };
  }, function () {
    return {};
  })(withError(DfpAdBase));
}
function refreshDfpAds(adSlots) {
  reactDfp.DFPManager.refresh(adSlots);
}

function HamburgerButtonBase(_ref) {
  var onClick = _ref.onClick,
      children = _ref.children;
  return React__default.createElement("a", {
    href: "/",
    onClick: onClick
  }, children);
}

function mapDispatchToProps$3(dispatch) {
  return {
    onClick: function onClick(e) {
      e.stopPropagation();
      e.preventDefault();
      dispatch({
        type: HAMBURGER_CLICKED
      });
    }
  };
}

var HamburgerButton =
/*#__PURE__*/
reactRedux.connect(function (state) {
  return {};
}, mapDispatchToProps$3)(HamburgerButtonBase);

var ScrollItem =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ScrollItem, _React$Component);

  function ScrollItem(props) {
    var _this;

    _classCallCheck(this, ScrollItem);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollItem).call(this, props));
    _this.state = {
      minHeight: props.minHeight
    };
    return _this;
  }

  _createClass(ScrollItem, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return React__default.createElement("div", {
        ref: function ref(node) {
          return _this2.node = node;
        },
        "data-infinite-scroll": this.props.index,
        style: {
          minHeight: this.state.minHeight
        }
      }, this.props.show && this.props.render(Object.assign({
        index: this.props.index
      }, this.props.data)));
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.show && !this.props.show) {
        this.setState({
          minHeight: this.props.minHeight
        });
      } else if (!nextProps.show && this.props.show) {
        this.setState({
          minHeight: this.node.clientHeight
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this3 = this;

      this.props.observers.forEach(function (observer) {
        return observer && observer.observe(_this3.node);
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this4 = this;

      this.props.observers.forEach(function (observer) {
        return observer && observer.unobserve(_this4.node);
      });
    }
  }]);

  return ScrollItem;
}(React__default.Component); // When this becomes visible, we call loadMore()


var ScrollLoadMore =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(ScrollLoadMore, _React$Component2);

  function ScrollLoadMore() {
    _classCallCheck(this, ScrollLoadMore);

    return _possibleConstructorReturn(this, _getPrototypeOf(ScrollLoadMore).apply(this, arguments));
  }

  _createClass(ScrollLoadMore, [{
    key: "render",
    value: function render() {
      var _this5 = this;

      return React__default.createElement("div", {
        ref: function ref(node) {
          return _this5.node = node;
        },
        "data-infinite-scroll": "load-more"
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this6 = this;

      this.props.observers.forEach(function (observer) {
        return observer && observer.observe(_this6.node);
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this7 = this;

      this.props.observers.forEach(function (observer) {
        return observer && observer.unobserve(_this7.node);
      });
    }
  }]);

  return ScrollLoadMore;
}(React__default.Component); // Basic Infinite Scroll, toggles showing items


var InfiniteScrollBase =
/*#__PURE__*/
function (_React$Component3) {
  _inherits(InfiniteScrollBase, _React$Component3);

  function InfiniteScrollBase(props) {
    var _this8;

    _classCallCheck(this, InfiniteScrollBase);

    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(InfiniteScrollBase).call(this, props));
    var initiallyShow = props.initiallyShow || 1;
    _this8.state = {
      visibleComponents: _toConsumableArray(Array(initiallyShow).keys()).reduce(function (arr, i) {
        arr[i] = true;
        return arr;
      }, {})
    };

    if (global.IntersectionObserver) {
      _this8.loadObserver = new IntersectionObserver(function (x) {
        return _this8.intersectionCallback(x);
      }, {
        rootMargin: props.loadMargin || "200px 0px 500px"
      });
    }

    return _this8;
  }

  _createClass(InfiniteScrollBase, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.loadObserver && this.loadObserver.disconnect();
    }
  }, {
    key: "intersectionCallback",
    value: function intersectionCallback(entries) {
      var _this9 = this;

      var visibleComponents = this.state.visibleComponents;
      entries.forEach(function (entry) {
        // Stupid browsers like UC and Mi don't correctly support the spec
        if (entry.isIntersecting === undefined) {
          if (_this9.props.showAllOnLegacyBrowser) {
            entry.isIntersecting = true;
          } else {
            return;
          }
        }

        var item = entry.target.getAttribute("data-infinite-scroll");

        if (item == 'load-more' && entry.isIntersecting) {
          _this9.props.loadNext();
        } else {
          var showItem = _this9.props.neverHideItem ? visibleComponents[item] || entry.isIntersecting : entry.isIntersecting;
          visibleComponents = Object.assign({}, visibleComponents, _defineProperty({}, item, showItem));
        }
      });
      this.setState({
        visibleComponents: visibleComponents
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this10 = this;

      return React__default.createElement("div", null, this.props.items.map(function (data, index) {
        return React__default.createElement(ScrollItem, {
          observers: _this10.props.observers.concat([_this10.loadObserver]),
          key: index,
          index: index,
          show: _this10.state.visibleComponents[index],
          render: _this10.props.render,
          data: data,
          minHeight: _this10.props.minHeight || 50
        });
      }), React__default.createElement(ScrollLoadMore, {
        observers: [this.loadObserver]
      }));
    }
  }]);

  return InfiniteScrollBase;
}(React__default.Component); // Calls a callback when an item covers bottom 20% of the screen (to change URL)


function withFocusObserver(Component) {
  return (
    /*#__PURE__*/
    function (_React$Component4) {
      _inherits(WithFocusObserver, _React$Component4);

      function WithFocusObserver(props) {
        var _this11;

        _classCallCheck(this, WithFocusObserver);

        _this11 = _possibleConstructorReturn(this, _getPrototypeOf(WithFocusObserver).call(this, props));

        if (global.IntersectionObserver) {
          _this11.focusObserver = new IntersectionObserver(function (x) {
            return _this11.focusCallback(x);
          }, {
            rootMargin: "-".concat(100 - props.focusCallbackAt, "% 0px -").concat(props.focusCallbackAt, "%")
          });
        }

        return _this11;
      }

      _createClass(WithFocusObserver, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.focusObserver && this.focusObserver.disconnect();
        }
      }, {
        key: "focusCallback",
        value: function focusCallback(entries) {
          var _this12 = this;

          entries.forEach(function (entry) {
            var item = entry.target.getAttribute("data-infinite-scroll");

            if (entry.isIntersecting) {
              _this12.props.onFocus(item);
            }
          });
        }
      }, {
        key: "render",
        value: function render() {
          return React__default.createElement(Component, Object.assign({}, this.props, {
            observers: (this.props.observers || []).concat([this.focusObserver])
          }));
        }
      }]);

      return WithFocusObserver;
    }(React__default.Component)
  );
}

var InfiniteScroll =
/*#__PURE__*/
withFocusObserver(InfiniteScrollBase);

var _arguments = arguments;
function removeDuplicateStories(existingStories, newStories) {
  var keyFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (story) {
    return story.id;
  };
  var existingStoryIds = existingStories.map(keyFn);
  return newStories.filter(function (story) {
    return !existingStoryIds.includes(keyFn(story));
  });
}
function getAssociatedTemplate(_ref) {
  var associatedMetadata = _ref["associated-metadata"];
  return associatedMetadata ? associatedMetadata.layout : 'default';
} // FIXME: TEST THIS

function replaceAllStoriesInCollection(collection, story) {
  var items = (collection.items || []).map(function (item) {
    if (item.type === "story") {
      return {
        id: story.id,
        type: "story",
        story: story
      };
    } else if (item.type === "collection") {
      return replaceAllStoriesInCollection(item, story);
    }

    return item;
  });
  return Object.assign({}, collection, {
    items: items
  });
} //Helps handle errors with async await pattern

var awaitHelper = function awaitHelper(promise) {
  return promise.then(function (data) {
    return {
      data: data,
      error: null
    };
  })["catch"](function (error) {
    return {
      error: error,
      data: null
    };
  });
};
var getQliticsSchema = function getQliticsSchema() {
  var story = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var card = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Array.from(_arguments).forEach(function (ele) {
    Object.keys(ele).length < 1 && console.warn("Required attribute missing for qlitics --> ".concat(ele));
  }); //Display warning to make debugging easier

  return {
    'story-content-id': story['story-content-id'],
    'story-version-id': story['story-version-id'],
    'card-content-id': card['content-id'],
    'card-version-id': card['content-version-id'],
    'story-element-id': element.id,
    'story-element-type': element.subtype || element.type
  };
};
var computeAccess = function computeAccess(previousState, currentState) {
  var currentAccess = get(currentState, ["access"], {});
  var currentStoryId = get(Object.keys(currentAccess), [0], "");

  if (currentStoryId in previousState) {
    var storyAccess = previousState[currentStoryId];

    if (storyAccess.granted !== currentAccess[currentStoryId].granted || storyAccess.grantReason !== currentAccess[currentStoryId].grantReason) {
      return _objectSpread({}, previousState, currentAccess);
    }

    return previousState;
  }

  return _objectSpread({}, previousState, currentAccess);
};

var InfiniteStoryBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(InfiniteStoryBase, _React$Component);

  function InfiniteStoryBase(props) {
    var _this;

    _classCallCheck(this, InfiniteStoryBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(InfiniteStoryBase).call(this, props));
    _this.state = {
      moreItems: [],
      loading: false,
      pageNumber: 0,
      seenStoryIds: [props.data.story.id]
    };
    return _this;
  }

  _createClass(InfiniteStoryBase, [{
    key: "allItems",
    value: function allItems() {
      return [this.props.data].concat(this.state.moreItems);
    }
  }, {
    key: "onFocus",
    value: function onFocus(index) {
      var _this2 = this;

      var item = this.allItems()[index];
      global.app.maybeSetUrl("/" + item.story.slug, get(item, ['story', 'seo', 'meta-title'], item.story.headline));
      this.props.onItemFocus && this.props.onItemFocus(item, index);

      if (!this.state.seenStoryIds.includes(item.story.id)) {
        this.setState({
          seenStoryIds: this.state.seenStoryIds.concat([item.story.id])
        }, function () {
          _this2.props.onInitialItemFocus && _this2.props.onInitialItemFocus(item, index);
        });
      }
    }
  }, {
    key: "loadMore",
    value: function loadMore() {
      var _this3 = this;

      if (this.state.loading) return;
      var pageNumber = this.state.pageNumber;
      var story = get(this.props.data, ['story'], {});
      this.setState({
        loading: true,
        pageNumber: pageNumber + 1
      }, function () {
        _this3.props.loadItems(pageNumber, story, _this3.props.config).then(function (items) {
          _this3.setState({
            loading: false,
            moreItems: _this3.state.moreItems.concat(removeDuplicateStories(_this3.allItems(), items, function (item) {
              return item.story.id;
            }))
          });
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      return React__default.createElement(InfiniteScroll, {
        render: this.props.render,
        items: this.allItems(),
        loadNext: function loadNext() {
          return _this4.loadMore();
        },
        loadMargin: this.props.loadMargin,
        focusCallbackAt: this.props.focusCallbackAt || 20,
        onFocus: function onFocus(index) {
          return _this4.onFocus(index);
        }
      });
    }
  }]);

  return InfiniteStoryBase;
}(React__default.Component);

var IntersectionObserverWrapper =
/*#__PURE__*/
function () {
  function IntersectionObserverWrapper(callback) {
    _classCallCheck(this, IntersectionObserverWrapper);

    this.observedItems = [];
    this.callback = callback;
  }

  _createClass(IntersectionObserverWrapper, [{
    key: "start",
    value: function start(margin) {
      var _this = this;

      this.observer = new global.IntersectionObserver(function (entries) {
        return _this.onObservation(entries);
      }, {
        rootMargin: margin,
        threshold: 0
      });
      this.observedItems.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            dom = _ref2[0],
            component = _ref2[1];

        return _this.observer.observe(dom);
      });
    }
  }, {
    key: "onObservation",
    value: function onObservation(entries) {
      var _this2 = this;

      entries.filter(function (entry) {
        return entry.isIntersecting === undefined || entry.isIntersecting;
      }).map(function (entry) {
        return entry.target;
      }).forEach(function (dom) {
        var index = _this2.observedItems.findIndex(function (x) {
          return x[0] === dom;
        });

        if (index > -1) {
          var component = _this2.observedItems[index][1];

          _this2.callback(component);

          _this2.unregister(dom, component);
        }
      });
    }
  }, {
    key: "register",
    value: function register(dom, component) {
      this.observedItems.push([dom, component]);
      this.observer && this.observer.observe(dom);
    }
  }, {
    key: "unregister",
    value: function unregister(dom, component) {
      var index = this.observedItems.findIndex(function (x) {
        return x[0] === dom;
      });

      if (index > -1) {
        this.observedItems.splice(index, 1);
        this.observer && this.observer.unobserve(dom);
      }
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.observer.disconnect();
    }
  }]);

  return IntersectionObserverWrapper;
}();

var StubObserverWrapper =
/*#__PURE__*/
function () {
  function StubObserverWrapper(callback) {
    _classCallCheck(this, StubObserverWrapper);

    this.callback = callback;
  }

  _createClass(StubObserverWrapper, [{
    key: "register",
    value: function register(dom, component) {
      this.callback(component);
    }
  }, {
    key: "start",
    value: function start() {}
  }, {
    key: "unregister",
    value: function unregister() {}
  }, {
    key: "disconnect",
    value: function disconnect() {}
  }]);

  return StubObserverWrapper;
}();

var LazyLoadImages =
/*#__PURE__*/
function (_React$Component) {
  _inherits(LazyLoadImages, _React$Component);

  function LazyLoadImages(props) {
    var _this3;

    _classCallCheck(this, LazyLoadImages);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(LazyLoadImages).call(this, props));

    var callback = function callback(component) {
      return component.showImage();
    };

    _this3.observerWrapper = global.IntersectionObserver ? new IntersectionObserverWrapper(callback) : new StubObserverWrapper(callback);
    return _this3;
  }

  _createClass(LazyLoadImages, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.observerWrapper.start(this.props.margin || "500px");
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.observerWrapper.disconnect();
    }
  }, {
    key: "getChildContext",
    value: function getChildContext() {
      var _this4 = this;

      return {
        lazyLoadObserveImage: function lazyLoadObserveImage(dom, component) {
          return dom && _this4.observerWrapper.register(dom, component);
        },
        lazyLoadUnobserveImage: function lazyLoadUnobserveImage(dom, component) {
          return dom && _this4.observerWrapper.unregister(dom, component);
        }
      };
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);

  return LazyLoadImages;
}(React__default.Component);
LazyLoadImages.childContextTypes = {
  lazyLoadObserveImage: PropTypes.func,
  lazyLoadUnobserveImage: PropTypes.func
};
var EagerLoadImages =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(EagerLoadImages, _React$Component2);

  function EagerLoadImages() {
    _classCallCheck(this, EagerLoadImages);

    return _possibleConstructorReturn(this, _getPrototypeOf(EagerLoadImages).apply(this, arguments));
  }

  _createClass(EagerLoadImages, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        lazyLoadEagerPredicate: this.props.predicate || function () {
          return true;
        }
      };
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);

  return EagerLoadImages;
}(React__default.Component);
EagerLoadImages.childContextTypes = {
  lazyLoadEagerPredicate: PropTypes.func
};

var LoadMoreStoriesManager =
/*#__PURE__*/
function (_React$Component) {
  _inherits(LoadMoreStoriesManager, _React$Component);

  function LoadMoreStoriesManager(props) {
    var _this;

    _classCallCheck(this, LoadMoreStoriesManager);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoadMoreStoriesManager).call(this, props));
    _this.state = {
      loading: false,
      pageNumber: 1,
      moreStories: [],
      noMoreStories: false
    };
    return _this;
  }

  _createClass(LoadMoreStoriesManager, [{
    key: "stories",
    value: function stories() {
      return this.props.stories.concat(this.state.moreStories);
    }
  }, {
    key: "loadMore",
    value: function loadMore(e) {
      var _this2 = this;

      e.preventDefault();
      if (this.state.loading) return;
      var pageNumber = this.state.pageNumber;
      this.setState({
        loading: true,
        pageNumber: pageNumber + 1
      }, function () {
        _this2.props.loadStories(pageNumber).then(function (stories) {
          _this2.setState({
            loading: false,
            moreStories: _this2.state.moreStories.concat(removeDuplicateStories(_this2.stories(), stories)),
            noMoreStories: stories.length < _this2.props.numStoriesToLoad
          });
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      return this.props.template(Object.assign({}, this.props, {
        stories: this.stories(),
        onLoadMore: function onLoadMore(e) {
          return _this3.loadMore(e);
        },
        loading: this.state.loading,
        noMoreStories: this.state.noMoreStories
      }));
    }
  }]);

  return LoadMoreStoriesManager;
}(React__default.Component);
var LoadMoreStoriesBase =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(LoadMoreStoriesBase, _React$Component2);

  function LoadMoreStoriesBase() {
    _classCallCheck(this, LoadMoreStoriesBase);

    return _possibleConstructorReturn(this, _getPrototypeOf(LoadMoreStoriesBase).apply(this, arguments));
  }

  _createClass(LoadMoreStoriesBase, [{
    key: "loadMoreStories",
    value: function loadMoreStories(pageNumber) {
      var _this4 = this;

      var stories = get(this.props, ['data', 'stories'], []);
      return getRequest(this.props.api || '/api/v1/stories', Object.assign({}, this.props.params, {
        offset: this.props.numStoriesToLoad * (pageNumber - 1) + stories.length,
        limit: this.props.numStoriesToLoad || 10,
        fields: this.props.fields
      })).json(function (response) {
        if (_this4.props.apiResponseTransformer) {
          return _this4.props.apiResponseTransformer(response);
        }

        return response.stories || get(response, ['results', 'stories'], []);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      return React__default.createElement(LoadMoreStoriesManager, Object.assign({}, this.props.data, {
        template: this.props.template,
        loadStories: function loadStories(pageNumber) {
          return _this5.loadMoreStories(pageNumber);
        },
        languageDirection: this.props.languageDirection,
        numStoriesToLoad: this.props.numStoriesToLoad || 10
      }));
    }
  }]);

  return LoadMoreStoriesBase;
}(React__default.Component);
var LoadMoreCollectionStories =
/*#__PURE__*/
function (_React$Component3) {
  _inherits(LoadMoreCollectionStories, _React$Component3);

  function LoadMoreCollectionStories() {
    _classCallCheck(this, LoadMoreCollectionStories);

    return _possibleConstructorReturn(this, _getPrototypeOf(LoadMoreCollectionStories).apply(this, arguments));
  }

  _createClass(LoadMoreCollectionStories, [{
    key: "loadMoreStories",
    value: function loadMoreStories(pageNumber) {
      var stories = get(this.props, ['data', 'stories'], []);
      var authorId = get(this.props, ["authorId"], null);
      var url = authorId ? "/api/v1/authors/".concat(authorId, "/collection") : "/api/v1/collections/".concat(this.props.collectionSlug);
      return getRequest(url, Object.assign({}, this.props.params, {
        offset: this.props.numStoriesToLoad * (pageNumber - 1) + stories.length,
        limit: this.props.numStoriesToLoad || 10
      })).json(function (response) {
        return (response.items || []).map(function (item) {
          return item.story;
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this6 = this;

      return React__default.createElement(LoadMoreStoriesManager, Object.assign({}, this.props.data, {
        template: this.props.template,
        loadStories: function loadStories(pageNumber) {
          return _this6.loadMoreStories(pageNumber);
        },
        languageDirection: this.props.languageDirection,
        numStoriesToLoad: this.props.numStoriesToLoad || 10
      }));
    }
  }]);

  return LoadMoreCollectionStories;
}(React__default.Component);

function LoadingIndicatorBase(props) {
  return React__default.createElement("div", {
    className: "loading-indicator ".concat(props.loading ? 'loading-indicator-loading' : '')
  }, props.loading && props.children);
}

function mapStateToProps$3(state) {
  return {
    loading: state.pageLoading
  };
}

function mapDispatchToProps$4() {
  return {};
}

var LoadingIndicator =
/*#__PURE__*/
reactRedux.connect(mapStateToProps$3, mapDispatchToProps$4)(LoadingIndicatorBase);

function MenuBase(_ref) {
  var children = _ref.children,
      className = _ref.className,
      itemClassName = _ref.itemClassName,
      items = _ref.items,
      currentUrl = _ref.currentUrl,
      slice = _ref.slice;
  items = items.slice.apply(items, slice);
  return React__default.createElement("ul", {
    className: className
  }, children, items.map(function (item, ix) {
    return React__default.createElement(MenuItem, {
      key: ix,
      item: item,
      className: itemClassName,
      currentUrl: currentUrl
    });
  }));
}

function mapStateToProps$4(state) {
  return {
    items: state.qt.config.layout.menu,
    currentUrl: state.qt.currentPath
  };
}

var Menu =
/*#__PURE__*/
reactRedux.connect(mapStateToProps$4, function () {
  return {};
})(MenuBase);

function getRelativeUrl(url) {
  var _ref2 = new URL(url),
      pathname = _ref2.pathname,
      search = _ref2.search,
      hash = _ref2.hash;

  return "".concat(pathname).concat(search || "").concat(hash || "");
}

function getMenuItemBody(item, className, url, currentUrl) {
  switch (item['item-type']) {
    case 'section':
      return React__default.createElement(Link, {
        href: url,
        className: className
      }, item.title);

    default:
      return React__default.createElement("a", {
        href: item.url,
        className: className
      }, item.title);
  }
}

function MenuItem(_ref3) {
  var item = _ref3.item,
      className = _ref3.className,
      currentUrl = _ref3.currentUrl;
  var url = getRelativeUrl(item.url);
  return React__default.createElement("li", null, getMenuItemBody(item, "".concat(className).concat(currentUrl == url ? " active" : ""), url));
}

var USED_PARAMS = ["imageCDN", "defaultWidth", "widths", "imgParams", "slug", "metadata", "aspectRatio", "reactTag", "eager"]; // Add the following CSS somewhere: img.qt-image { width: 100%; object-fit: cover; }

function hashString(string) {
  if (!string) return 0;
  var hash = 0,
      i;

  for (i = 0; i < string.length; i++) {
    hash = (hash << 5) - hash + string.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return hash;
}

function responsiveProps(props) {
  var image = new quintypeJs.FocusedImage(props.slug, props.metadata);

  function generatePath(size) {
    return "//" + props.imageCDN + "/" + image.path(props.aspectRatio, Object.assign({
      w: size
    }, props.imgParams));
  }

  return {
    src: generatePath(props.defaultWidth),
    srcSet: props.widths ? props.widths.map(function (size) {
      return "".concat(generatePath(size), " ").concat(size, "w");
    }).join(",") : undefined,
    key: hashString(props.slug)
  };
}

var ResponsiveImageBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ResponsiveImageBase, _React$Component);

  function ResponsiveImageBase(props, context) {
    var _this;

    _classCallCheck(this, ResponsiveImageBase);

    if (process.env.NODE_ENV == 'development' && !props.alt && !props.reactTag) {
      global.console && global.console.warn("Image Found without an alt attribute: ".concat(responsiveProps(props).src));
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResponsiveImageBase).call(this, props, context));
    _this.state = {
      showImage: !_this.shouldLazyLoad()
    };
    return _this;
  }

  _createClass(ResponsiveImageBase, [{
    key: "shouldLazyLoad",
    value: function shouldLazyLoad() {
      if (this.props.eager === true) {
        return false;
      }

      if (this.context.lazyLoadEagerPredicate && this.context.lazyLoadEagerPredicate(this.props.eager)) {
        return false;
      }

      if (this.context.lazyLoadObserveImage && this.context.lazyLoadUnobserveImage) {
        return true;
      }

      return false;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var imageProps = this.state.showImage ? responsiveProps(this.props) : {
        src: emptyWebGif
      };
      return React__default.createElement(this.props.reactTag || "img", Object.assign(imageProps, _objectWithoutProperties(this.props, USED_PARAMS), {
        ref: function ref(dom) {
          return _this2.dom = dom;
        },
        className: this.props.className ? "qt-image ".concat(this.props.className) : 'qt-image'
      }));
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.shouldLazyLoad() && this.context.lazyLoadObserveImage(this.dom, this);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.shouldLazyLoad() && this.context.lazyLoadUnobserveImage(this.dom, this);
    }
  }, {
    key: "showImage",
    value: function showImage() {
      this.setState({
        showImage: true
      });
    }
  }]);

  return ResponsiveImageBase;
}(React__default.Component);

function mapStateToProps$5(state) {
  return {
    imageCDN: state.qt.config["cdn-image"]
  };
}

ResponsiveImageBase.contextTypes = {
  lazyLoadObserveImage: PropTypes.func,
  lazyLoadUnobserveImage: PropTypes.func,
  lazyLoadEagerPredicate: PropTypes.func
};
var ResponsiveImage =
/*#__PURE__*/
reactRedux.connect(mapStateToProps$5, {})(ResponsiveImageBase);
var ResponsiveSource = function ResponsiveSource(props) {
  return React__default.createElement(ResponsiveImage, Object.assign({
    reactTag: 'source',
    src: false,
    defaultWidth: 1024
  }, props));
};
function ResponsiveHeroImage(props) {
  return React__default.createElement(ResponsiveImage, Object.assign({
    slug: props.story["hero-image-s3-key"],
    metadata: props.story["hero-image-metadata"],
    alt: props.story["headline"]
  }, _objectWithoutProperties(props, ['story'])));
}

var SearchBoxBase =
/*#__PURE__*/
function (_Component) {
  _inherits(SearchBoxBase, _Component);

  function SearchBoxBase(props) {
    var _this;

    _classCallCheck(this, SearchBoxBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchBoxBase).call(this, props));
    _this.state = {
      query: _this.props.initValue || ""
    };
    return _this;
  }

  _createClass(SearchBoxBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.focus();
    }
  }, {
    key: "onSubmit",
    value: function onSubmit(e) {
      e.preventDefault();
      this.state.query && this.props.navigateTo("/search?q=".concat(encodeURIComponent(this.state.query)));
      this.props.onSubmitHandler && this.props.onSubmitHandler(this.state.query);
    }
  }, {
    key: "keyPress",
    value: function keyPress(e) {
      if (e.keyCode === 27) this.props.onEscape && this.props.onEscape();
    }
  }, {
    key: "focus",
    value: function focus() {
      this.textInput && this.textInput.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var Render = this.props.template || this.defaultTemplate;
      return React__default.createElement("form", {
        role: "search",
        action: "/search",
        onSubmit: function onSubmit(e) {
          return _this2.onSubmit(e);
        },
        className: this.props.className,
        ref: this.props.formRef
      }, React__default.createElement(Render, null, React__default.createElement("input", {
        type: "search",
        name: "q",
        placeholder: this.props.placeholder,
        value: this.state.query,
        onChange: function onChange(e) {
          return _this2.setState({
            query: e.target.value
          });
        },
        className: this.props.inputClassName,
        id: this.props.inputId,
        ref: function ref(input) {
          return _this2.textInput = input;
        },
        onKeyDown: function onKeyDown(e) {
          return _this2.keyPress(e);
        }
      })));
    }
  }], [{
    key: "defaultTemplate",
    value: function defaultTemplate(_ref) {
      var children = _ref.children;
      return children;
    }
  }]);

  return SearchBoxBase;
}(React.Component);
SearchBoxBase.protoTypes = {
  initValue: PropTypes__default.string,
  placeholder: PropTypes__default.string,
  className: PropTypes__default.string,
  formRef: PropTypes__default.any,
  inputClassName: PropTypes__default.string,
  inputId: PropTypes__default.string,
  template: PropTypes__default.element,
  onSubmitHandler: PropTypes__default.func,
  onEscape: PropTypes__default.func,
  navigateTo: PropTypes__default.func
};

var mapStateToProps$6 = function mapStateToProps(state) {
  return {};
};

var mapDispatchToProps$5 = function mapDispatchToProps(dispatch) {
  return {
    navigateTo: function navigateTo(url) {
      global.app.navigateToPage(dispatch, url);
    }
  };
};

var SearchBox =
/*#__PURE__*/
reactRedux.connect(mapStateToProps$6, mapDispatchToProps$5)(SearchBoxBase);

var SearchPageBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SearchPageBase, _React$Component);

  function SearchPageBase() {
    _classCallCheck(this, SearchPageBase);

    return _possibleConstructorReturn(this, _getPrototypeOf(SearchPageBase).apply(this, arguments));
  }

  _createClass(SearchPageBase, [{
    key: "search",
    value: function search(pageNumber) {
      return getRequest("/api/v1/search", Object.assign(this.props.params, {
        offset: (this.props.storiesPerPage || 20) * pageNumber,
        fields: this.props.fields
      })).json(function (response) {
        return get(response, ["results", "stories"], []);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      return React__default.createElement(LoadMoreStoriesManager, Object.assign({}, this.props.data, {
        template: this.props.template,
        loadStories: function loadStories(pageNumber) {
          return _this.search(pageNumber);
        }
      }));
    }
  }]);

  return SearchPageBase;
}(React__default.Component);

function cloneScriptNode(node) {
  var script = document.createElement("script");
  script.text = node.innerHTML;

  for (var i = node.attributes.length - 1; i >= 0; i--) {
    script.setAttribute(node.attributes[i].name, node.attributes[i].value);
  }

  return script;
}

function replaceScriptNodes(node) {
  if (node.tagName === 'SCRIPT') {
    node.parentNode.replaceChild(cloneScriptNode(node), node);
    if (window.instgrm) window.instgrm.Embeds.process(); //Temporary fix for instagram element on live blog page.
  } else {
    var i = 0;
    var children = node.childNodes;

    while (i < children.length) {
      replaceScriptNodes(children[i++]);
    }
  }
}

var JSEmbed =
/*#__PURE__*/
function (_React$Component) {
  _inherits(JSEmbed, _React$Component);

  _createClass(JSEmbed, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return !(this.props.id === nextProps.id && this.props.embedJS === nextProps.embedJS);
    }
  }]);

  function JSEmbed(props) {
    var _this;

    _classCallCheck(this, JSEmbed);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(JSEmbed).call(this, props));
    _this.uniqueId = 'anagh';
    return _this;
  }

  _createClass(JSEmbed, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      replaceScriptNodes(this.JSEmbed);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      replaceScriptNodes(this.JSEmbed);
    }
  }, {
    key: "getEmbedJS",
    value: function getEmbedJS() {
      var embedjs = this.props.embedJS;
      return embedjs != null ? atob(embedjs) : null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return React__default.createElement("div", {
        ref: function ref(jsembed) {
          _this2.JSEmbed = jsembed;
        },
        dangerouslySetInnerHTML: {
          __html: this.getEmbedJS()
        }
      });
    }
  }]);

  return JSEmbed;
}(React__default.Component);

var YouTube = null;
var loaderPromise = null;

function loadLibrary() {
  if (loaderPromise === null) {
    loaderPromise = Promise.resolve(require(
    /* webpackChunkName: "qtc-react-youtube" */
    "react-youtube")).then(function (YT) {
      YouTube = YT["default"];
    })["catch"](function (err) {
      console.log('Failed to load react-youtube', err);
      return Promise.reject();
    });
  }

  return loaderPromise;
}

function isLibraryLoaded() {
  return YouTube !== null;
}

var StoryElementYoutube =
/*#__PURE__*/
function (_React$Component) {
  _inherits(StoryElementYoutube, _React$Component);

  function StoryElementYoutube(props) {
    var _this;

    _classCallCheck(this, StoryElementYoutube);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(StoryElementYoutube).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "triggerQlitics", function (action) {
      if (_this.props.disableAnalytics === true) return false;
      var _this$props = _this.props,
          _this$props$story = _this$props.story,
          story = _this$props$story === void 0 ? {} : _this$props$story,
          _this$props$card = _this$props.card,
          card = _this$props$card === void 0 ? {} : _this$props$card,
          _this$props$element = _this$props.element,
          element = _this$props$element === void 0 ? {} : _this$props$element;

      var qliticsData = _objectSpread({}, getQliticsSchema(story, card, element), {
        'story-element-action': action
      });

      if (global.qlitics) {
        global.qlitics('track', 'story-element-action', qliticsData);
      } else {
        global.qlitics = global.qlitics || function () {
          (qlitics.q = qlitics.q || []).push(arguments);
        };

        qlitics.qlitics.q.push('track', 'story-element-action', qliticsData);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onPlayCallback", function (event) {
      _this.triggerQlitics('play');

      _this.props.onPlay === "function" && _this.props.onPlay(event);
    });

    _defineProperty(_assertThisInitialized(_this), "onPauseCallback", function (event) {
      _this.triggerQlitics('pause');

      _this.props.onPause === "function" && _this.props.onPause(event);
    });

    _defineProperty(_assertThisInitialized(_this), "onEndCallback", function (event) {
      _this.triggerQlitics('end');

      _this.props.onEnd === "function" && _this.props.onEnd(event);
    });

    _this.opts = {
      playerVars: {
        autoplay: 0
      }
    };
    return _this;
  }

  _createClass(StoryElementYoutube, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this._isMounted = true;
      loadLibrary().then(function () {
        return _this2._isMounted && _this2.forceUpdate();
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;
    }
  }, {
    key: "render",
    value: function render() {
      if (isLibraryLoaded()) {
        return React__default.createElement(YouTube, {
          videoId: getYouTubeID(this.props.element.url),
          opts: this.opts,
          onPlay: this.onPlayCallback,
          onPause: this.onPauseCallback,
          onEnd: this.onEndCallback
        });
      }

      return React__default.createElement("div", null);
    }
  }]);

  return StoryElementYoutube;
}(React__default.Component);

var defaultPolltypeHost = 'https://www.polltype.com';

var PolltypeBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(PolltypeBase, _React$Component);

  function PolltypeBase() {
    _classCallCheck(this, PolltypeBase);

    return _possibleConstructorReturn(this, _getPrototypeOf(PolltypeBase).apply(this, arguments));
  }

  _createClass(PolltypeBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.loadPolltypeJS();
    }
  }, {
    key: "loadPolltypeJS",
    value: function loadPolltypeJS() {
      var source = this.props.polltypeHost.replace(/^https:|^http:/i, '') + '/embed.js';

      if (!global._polltypeAdded) {
        global._polltypeAdded = true;
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = source;
        document.body.appendChild(script);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React__default.createElement("div", {
        "data-polltype-embed-id": this.props.id
      });
    }
  }]);

  return PolltypeBase;
}(React__default.Component);

function mapStateToProps$7(state) {
  return {
    polltypeHost: state.qt.config["polltype-host"] || defaultPolltypeHost
  };
}

var Polltype =
/*#__PURE__*/
reactRedux.connect(mapStateToProps$7, {})(PolltypeBase);

function renderTableBody(hasHeader, _ref) {
  var headerFields = _ref.headerFields,
      headerData = _ref.headerData;
  var headerRow = [];

  if (hasHeader) {
    headerRow = [React__default.createElement("thead", null, React__default.createElement("tr", null, headerFields.map(function (headerField) {
      return React__default.createElement("th", null, headerField);
    })))];
  } else {
    headerRow = [React__default.createElement("tr", null, headerFields.map(function (headerField) {
      return React__default.createElement("td", null, headerField);
    }))];
  }

  return headerRow.concat(headerData.map(function (data) {
    return React__default.createElement("tr", null, headerFields.map(function (headerField) {
      return React__default.createElement("td", null, data[headerField]);
    }));
  }));
}

function TableView(_ref2) {
  var className = _ref2.className,
      hasHeader = _ref2.hasHeader,
      _ref2$tableModData = _ref2.tableModData,
      tableModData = _ref2$tableModData === void 0 ? {} : _ref2$tableModData;
  return React__default.createElement("table", {
    className: className
  }, renderTableBody(hasHeader, tableModData));
}
var Table =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Table, _React$Component);

  function Table(props) {
    var _this;

    _classCallCheck(this, Table);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Table).call(this, props));
    _this.state = {
      tableModData: {
        headerFields: [],
        headerData: []
      }
    };
    return _this;
  }

  _createClass(Table, [{
    key: "formatData",
    value: function formatData(content) {
      var dataArray = content.split(/\n/);
      var headerRowData = get(dataArray, [0], '');
      var headerFields = headerRowData.split(',').map(function (headerValue) {
        return headerValue.trim();
      });
      var dataFields = dataArray.slice(1, dataArray.length - 1);
      var headerData = dataFields.map(function (dataField) {
        return dataField.split(',').reduce(function (acc, currEle, index) {
          acc[get(headerFields, [index], '').trim()] = currEle.trim();
          return acc;
        }, {});
      });
      this.setState({
        tableModData: {
          headerFields: headerFields,
          headerData: headerData
        }
      });
      return {
        headerFields: headerFields,
        headerData: headerData
      };
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var content = get(this.props, ['data', 'content']);
      this.formatData(content);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var prevContent = get(this.props, ['data', 'content']);
      var nextContent = get(nextProps, ['data', 'content']);

      if (prevContent !== nextContent) {
        this.formatData(nextContent);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var tableModData = this.state.tableModData;

      if (!get(tableModData, ['headerFields'], []).length > 0) {
        return null;
      }

      var className = "story-element-table-".concat(this.props.id);
      return React__default.createElement(this.props.tableComponent || TableView, {
        hasHeader: this.props.hasHeader,
        tableModData: tableModData,
        showPageSizeOptions: false,
        showPageJump: false,
        className: className
      });
    }
  }]);

  return Table;
}(React__default.Component);

function StoryElementText(_ref) {
  var _ref$element = _ref.element,
      element = _ref$element === void 0 ? {} : _ref$element,
      externalLink = _ref.externalLink;
  var text = element.text || "";

  if (externalLink) {
    text = element.text.replace(/<a/g, '<a target="_blank"');
  }

  return React__default.createElement("div", {
    dangerouslySetInnerHTML: {
      __html: text
    }
  });
}

function StoryElementAlsoRead(_ref2) {
  var element = _ref2.element,
      story = _ref2.story,
      _ref2$alsoreadText = _ref2.alsoreadText,
      alsoreadText = _ref2$alsoreadText === void 0 ? "Also Read: " : _ref2$alsoreadText;
  var linkedStories = get(story, ["linked-stories"]);
  var linkedStoryId = get(element, ["metadata", "linked-story-id"]);
  var linkedStorySlug = get(linkedStories, [linkedStoryId, "slug"]);
  var storyUrl = "/".concat(linkedStorySlug);
  var linkProps = {
    className: "story-element-text-also-read__link",
    href: storyUrl
  };
  return React__default.createElement("h3", {}, React__default.createElement("span", {
    className: "story-element-text-also-read__label"
  }, alsoreadText), React__default.createElement(Link, linkProps, element.text));
}

function StoryElementImage(_ref3) {
  var element = _ref3.element,
      _ref3$story = _ref3.story,
      story = _ref3$story === void 0 ? {} : _ref3$story,
      imageWidths = _ref3.imageWidths,
      imageDefaultWidth = _ref3.imageDefaultWidth,
      _ref3$onClick = _ref3.onClick,
      onClick = _ref3$onClick === void 0 ? function () {} : _ref3$onClick;
  return React__default.createElement("figure", {}, React__default.createElement(ResponsiveImage, {
    slug: element["image-s3-key"],
    metadata: element["metadata"],
    aspectRatio: null,
    defaultWidth: imageDefaultWidth || 640,
    widths: imageWidths || [360, 640, 1200],
    imgParams: {
      auto: ["format", "compress"]
    },
    alt: element.title || story.headline,
    onClick: onClick
  }), React__default.createElement("div", {
    className: "story-element-caption-attribution-wrapper"
  }, element.title ? React__default.createElement("figcaption", {
    dangerouslySetInnerHTML: {
      __html: element.title
    },
    className: "story-element-image-title"
  }) : undefined, element["image-attribution"] ? React__default.createElement("figcaption", {
    dangerouslySetInnerHTML: {
      __html: element["image-attribution"]
    },
    className: "story-element-image-attribution"
  }) : undefined));
}

function StoryElementTitle(_ref4) {
  var element = _ref4.element;
  return React__default.createElement("h2", {}, element.text);
}

function StoryElementSoundCloud(_ref5) {
  var element = _ref5.element;
  return React__default.createElement("iframe", {
    src: element["embed-url"],
    width: "100%"
  });
}

function StoryElementJsembed(_ref6) {
  var element = _ref6.element;
  return React__default.createElement(JSEmbed, {
    embedJS: element["embed-js"],
    id: element["id"]
  });
}

function StoryElementPolltype(_ref7) {
  var element = _ref7.element;
  return React__default.createElement(Polltype, {
    id: element["polltype-id"]
  });
}

function StoryElementTable(_ref8) {
  var element = _ref8.element;
  return React__default.createElement(Table, {
    id: element.id,
    data: element.data,
    hasHeader: element.metadata["has-header"]
  });
}

function StoryElementFile(_ref9) {
  var element = _ref9.element;
  return React__default.createElement(React__default.Fragment, null, React__default.createElement("div", {
    className: "story-element-file__title"
  }, element["file-name"]), React__default.createElement("a", {
    className: "story-element-file__link",
    href: element.url,
    download: true
  }, "download"));
} // FIXME MISSING: composite
// TODO: Can also support various subtypes (though not needed potentially)


var DEFAULT_TEMPLATES = {
  text: StoryElementText,
  image: StoryElementImage,
  title: StoryElementTitle,
  "youtube-video": StoryElementYoutube,
  "soundcloud-audio": StoryElementSoundCloud,
  jsembed: StoryElementJsembed,
  polltype: StoryElementPolltype,
  table: StoryElementTable,
  "also-read": StoryElementAlsoRead,
  file: StoryElementFile
};

var StoryElementBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(StoryElementBase, _React$Component);

  function StoryElementBase(props) {
    var _this;

    _classCallCheck(this, StoryElementBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(StoryElementBase).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "initiateObserver", function () {
      if (_this.props.disableAnalytics === true) return false;
      var options = {
        root: null,
        rootMargin: "0px",
        threshold: 1.0
      };
      _this.observer = new IntersectionObserver(_this.observerCallback, options);

      _this.observer.observe(_this.storyElementRef);
    });

    _defineProperty(_assertThisInitialized(_this), "destroyObserver", function () {
      _this.observer && _this.observer.disconnect();
    });

    _defineProperty(_assertThisInitialized(_this), "observerCallback", function (entries) {
      entries.forEach(function (entry) {
        if (entry.isIntersecting) {
          _this.emitElementQlitics();
        }
      });
    });

    _this.observer = null;
    _this.storyElementRef = null;
    return _this;
  }

  _createClass(StoryElementBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.initiateObserver();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.destroyObserver();
    }
  }, {
    key: "template",
    value: function template() {
      var storyElement = this.props.element;
      var templates = Object.assign({}, DEFAULT_TEMPLATES, this.props.templates);
      return templates[storyElement.subtype] || templates[storyElement.type] || "div";
    }
  }, {
    key: "emitElementQlitics",
    value: function emitElementQlitics() {
      var _this$props = this.props,
          _this$props$story = _this$props.story,
          story = _this$props$story === void 0 ? {} : _this$props$story,
          _this$props$card = _this$props.card,
          card = _this$props$card === void 0 ? {} : _this$props$card,
          _this$props$element = _this$props.element,
          element = _this$props$element === void 0 ? {} : _this$props$element;

      if (global.qlitics) {
        global.qlitics("track", "story-element-view", getQliticsSchema(story, card, element));
      } else {
        global.qlitics = global.qlitics || function () {
          (qlitics.q = qlitics.q || []).push(arguments);
        };

        global.qlitics("track", "story-element-view", getQliticsSchema(story, card, element));
      }
    }
  }, {
    key: "storyElement",
    value: function storyElement() {
      return this.props.element;
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames,
          _this2 = this;

      var storyElement = this.props.element;
      var typeClassName = "story-element-".concat(storyElement.type);
      var subtypeClassName = "story-element-".concat(storyElement.type, "-").concat(storyElement.subtype);
      var storyElementTemplate = this.template();

      var _this$props2 = this.props,
          _this$props2$renderTe = _this$props2.renderTemplates,
          renderTemplates = _this$props2$renderTe === void 0 ? {} : _this$props2$renderTe,
          elementProps = _objectWithoutProperties(_this$props2, ["renderTemplates"]);

      var renderTemplate = renderTemplates[storyElement.subtype] || renderTemplates[storyElement.type];
      return React__default.createElement("div", {
        className: classNames((_classNames = {
          "story-element": true
        }, _defineProperty(_classNames, typeClassName, true), _defineProperty(_classNames, subtypeClassName, !!storyElement.subtype), _classNames)),
        ref: function ref(_ref10) {
          return _this2.storyElementRef = _ref10;
        }
      }, renderTemplate ? React__default.createElement(renderTemplate, _objectSpread({}, elementProps), React__default.createElement(storyElementTemplate, Object.assign({}, elementProps))) : React__default.createElement(storyElementTemplate, Object.assign({}, elementProps)));
    }
  }]);

  return StoryElementBase;
}(React__default.Component);

var StoryElement =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(StoryElement, _React$Component2);

  function StoryElement(props) {
    var _this3;

    _classCallCheck(this, StoryElement);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(StoryElement).call(this, props));
    _this3.state = {
      crashed: false
    };
    return _this3;
  }

  _createClass(StoryElement, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error, stack) {
      this.setState({
        crashed: true,
        error: error
      });
      console && console.error("Caught Exception: ".concat(error && error.message));
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.crashed) {
        return React__default.createElement("div", {
          className: "story-element story-element-crashed"
        });
      } else {
        return React__default.createElement(StoryElementBase, this.props);
      }
    }
  }]);

  return StoryElement;
}(React__default.Component);
var STORY_ELEMENT_TEMPLATES = DEFAULT_TEMPLATES;

function getNativeShareHandler(canNativeShare, title, fullUrl) {
  if (!canNativeShare) {
    return null;
  }

  return function handleShare() {
    window.navigator.share({
      title: title,
      url: fullUrl
    })["catch"](console.error);
  };
}

var SocialShareBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SocialShareBase, _React$Component);

  function SocialShareBase(props) {
    var _this;

    _classCallCheck(this, SocialShareBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SocialShareBase).call(this, props));
    _this.state = {
      canNativeShare: false
    };
    return _this;
  }

  _createClass(SocialShareBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        canNativeShare: global && global.navigator && global.navigator.share
      });
    }
  }, {
    key: "render",
    value: function render() {
      var fullUrl = this.props.fullUrl || "".concat(this.props.publisherUrl, "/").concat(this.props.url);
      var hashtags = this.props.hashtags ? this.props.hashtags : '';
      return React__default.createElement(this.props.template, Object.assign({
        fbUrl: "https://www.facebook.com/sharer.php?u=".concat(encodeURIComponent(fullUrl)),
        twitterUrl: "https://twitter.com/intent/tweet?url=".concat(encodeURIComponent(fullUrl), "&text=").concat(encodeURIComponent(this.props.title), "&hashtags=").concat(hashtags),
        gplusUrl: "https://plus.google.com/share?url=".concat(encodeURIComponent(fullUrl)),
        linkedinUrl: "https://www.linkedin.com/shareArticle?url=".concat(encodeURIComponent(fullUrl), "&title=").concat(encodeURIComponent(this.props.title)),
        whatsappUrl: "https://api.whatsapp.com/send?text=".concat(encodeURIComponent(fullUrl)),
        mailtoUrl: "mailto:".concat("?subject=", encodeURIComponent(this.props.title), "&body=").concat(encodeURIComponent(fullUrl)),
        handleNativeShare: getNativeShareHandler(this.state.canNativeShare, this.props.title, fullUrl)
      }, this.props));
    }
  }]);

  return SocialShareBase;
}(React__default.Component);

function mapStateToProps$8(state) {
  return {
    publisherUrl: state.qt.config["sketches-host"]
  };
}

var SocialShare =
/*#__PURE__*/
reactRedux.connect(mapStateToProps$8, {})(
/*#__PURE__*/
withError(SocialShareBase));

var StarIcon = function StarIcon(_ref) {
  var size = _ref.size,
      foregroundColor = _ref.foregroundColor,
      backgroundColor = _ref.backgroundColor,
      className = _ref.className;
  return React__default.createElement("svg", {
    className: className,
    width: size,
    height: size,
    viewBox: "0 0 45 45",
    xmlns: "http://www.w3.org/2000/svg"
  }, React__default.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, React__default.createElement("path", {
    d: "M44.571 17.188c0 .392-.232.82-.696 1.285l-9.723 9.482 2.303 13.393c.018.125.027.304.027.536 0 .375-.094.692-.281.95-.188.26-.46.39-.817.39-.34 0-.696-.108-1.072-.322L22.287 36.58l-12.027 6.322c-.393.214-.75.321-1.072.321-.375 0-.656-.13-.843-.388-.188-.26-.281-.576-.281-.951 0-.107.017-.286.053-.536l2.304-13.393-9.75-9.482c-.447-.482-.67-.91-.67-1.285 0-.661.5-1.072 1.5-1.233L14.946 14l6.027-12.188c.34-.732.777-1.098 1.313-1.098.535 0 .973.366 1.312 1.099L29.625 14l13.446 1.955c1 .161 1.5.572 1.5 1.232z",
    fill: backgroundColor
  }), React__default.createElement("path", {
    d: "M22.286.714V36.58l-12.027 6.322c-.393.214-.75.321-1.072.321-.375 0-.656-.13-.843-.388-.188-.26-.281-.576-.281-.951 0-.107.017-.286.053-.536l2.304-13.393-9.75-9.482c-.447-.482-.67-.91-.67-1.285 0-.661.5-1.072 1.5-1.233L14.946 14l6.027-12.188c.34-.732.777-1.098 1.313-1.098z",
    fill: foregroundColor
  })));
};

var ReviewRating = function ReviewRating(_ref) {
  var value = _ref.value,
      _ref$canShowEmptyRati = _ref.canShowEmptyRating,
      canShowEmptyRating = _ref$canShowEmptyRati === void 0 ? false : _ref$canShowEmptyRati,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 20 : _ref$size,
      _ref$activeColor = _ref.activeColor,
      activeColor = _ref$activeColor === void 0 ? "gold" : _ref$activeColor,
      _ref$inActiveColor = _ref.inActiveColor,
      inActiveColor = _ref$inActiveColor === void 0 ? "gray" : _ref$inActiveColor,
      _ref$count = _ref.count,
      count = _ref$count === void 0 ? 5 : _ref$count,
      _ref$showHalfStar = _ref.showHalfStar,
      showHalfStar = _ref$showHalfStar === void 0 ? true : _ref$showHalfStar,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? "review-rating" : _ref$className,
      _ref$activeSymbol = _ref.activeSymbol,
      activeSymbol = _ref$activeSymbol === void 0 ? null : _ref$activeSymbol,
      _ref$inActiveSymbol = _ref.inActiveSymbol,
      inActiveSymbol = _ref$inActiveSymbol === void 0 ? null : _ref$inActiveSymbol,
      _ref$halfActiveSymbol = _ref.halfActiveSymbol,
      halfActiveSymbol = _ref$halfActiveSymbol === void 0 ? null : _ref$halfActiveSymbol;
  if (!canShowEmptyRating && value < 0.1) return null;

  var activeComponent = function activeComponent(index) {
    return activeSymbol ? React__default.cloneElement(activeSymbol, {
      size: size,
      activeColor: activeColor,
      inActiveColor: inActiveColor,
      className: "".concat(className, "-symbol active"),
      key: "review-".concat(index)
    }) : React__default.createElement(StarIcon, {
      size: size,
      foregroundColor: activeColor,
      backgroundColor: activeColor,
      className: "".concat(className, "-symbol active"),
      key: "review-".concat(index),
      "data-test-id": "star-icon"
    });
  };

  var inActiveComponent = function inActiveComponent(index) {
    return inActiveSymbol ? React__default.cloneElement(inActiveSymbol, {
      size: size,
      activeColor: activeColor,
      inActiveColor: inActiveColor,
      className: "".concat(className, "-symbol inactive"),
      key: "review-".concat(index)
    }) : React__default.createElement(StarIcon, {
      size: size,
      foregroundColor: inActiveColor,
      backgroundColor: inActiveColor,
      className: "".concat(className, "-symbol inactive"),
      key: "review-".concat(index)
    });
  };

  var halfActiveComponent = function halfActiveComponent(index) {
    return halfActiveSymbol ? React__default.cloneElement(halfActiveSymbol, {
      size: size,
      activeColor: activeColor,
      inActiveColor: inActiveColor,
      className: "".concat(className, "-symbol half-active"),
      key: "review-".concat(index)
    }) : React__default.createElement(StarIcon, {
      size: size,
      foregroundColor: activeColor,
      backgroundColor: inActiveColor,
      className: "".concat(className, "-symbol half-active"),
      key: "review-".concat(index)
    });
  };

  var children = [];

  for (var i = 1; i <= count; i++) {
    if (i <= Math.floor(value)) {
      children.push(activeComponent(i));
    } else if (showHalfStar && value - Math.floor(value) > 0 && i === Math.round(value)) {
      children.push(halfActiveComponent(i));
    } else {
      children.push(inActiveComponent(i));
    }
  }

  return React__default.createElement("div", {
    className: className
  }, children);
};

function StoryNotImplemented() {
  return React__default.createElement("div", {
    "data-comment": "Story Template Not Implemented"
  });
}

function CollectionNotImplemented() {
  return React__default.createElement("div", {
    "data-comment": "Collection Template Not Implemented"
  });
}

function renderCollectionItem(collectionItem, index, collectionTemplates, storyTemplates) {
  var otherProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  switch (collectionItem.type) {
    case "collection":
      return React__default.createElement(collectionTemplates(getAssociatedTemplate(collectionItem), index), _objectSpread({
        key: "".concat(index, "-").concat(collectionItem.id),
        index: index,
        collection: collectionItem,
        metadata: collectionItem["associated-metadata"] || {}
      }, otherProps));

    case "story":
      return React__default.createElement(storyTemplates(index), _objectSpread({
        key: "".concat(index, "-").concat(collectionItem.id),
        index: index,
        story: collectionItem.story,
        metadata: collectionItem["associated-metadata"] || {}
      }, otherProps));

    default:
      return React__default.createElement("div", {
        "data-comment": "".concat(collectionItem.type, " not implemented")
      });
  }
} // Pass this the HomePage Collection


function Collection(_ref) {
  var className = _ref.className,
      collection = _ref.collection,
      collectionTemplates = _ref.collectionTemplates,
      storyTemplates = _ref.storyTemplates,
      _ref$interstitial = _ref.interstitial,
      interstitial = _ref$interstitial === void 0 ? function () {
    return undefined;
  } : _ref$interstitial;
  var children = collection.items.map(function (collectionItem, index) {
    return renderCollectionItem(collectionItem, index, collectionTemplates, storyTemplates);
  }).reduce(function (arr, v, i) {
    return arr.concat([v, interstitial(i)]);
  }, []);
  return React__default.createElement("div", {
    className: className
  }, children);
}
Collection.defaultProps = {
  collectionTemplates: function collectionTemplates() {
    return CollectionNotImplemented;
  },
  storyTemplates: function storyTemplates() {
    return StoryNotImplemented;
  }
};
function LazyCollection(_ref2) {
  var className = _ref2.className,
      collection = _ref2.collection,
      collectionTemplates = _ref2.collectionTemplates,
      storyTemplates = _ref2.storyTemplates,
      lazyAfter = _ref2.lazyAfter,
      otherProps = _objectWithoutProperties(_ref2, ["className", "collection", "collectionTemplates", "storyTemplates", "lazyAfter"]);

  return React__default.createElement("div", {
    className: className
  }, React__default.createElement(InfiniteScroll, {
    render: function render(_ref3) {
      var index = _ref3.index;
      return renderCollectionItem(collection.items[index], index, collectionTemplates, storyTemplates, otherProps);
    },
    items: collection.items,
    loadNext: function loadNext() {
      return [];
    },
    initiallyShow: lazyAfter,
    neverHideItem: true,
    showAllOnLegacyBrowser: true // No Op
    ,
    focusCallbackAt: 20,
    onFocus: function onFocus() {}
  }));
}
LazyCollection.defaultProps = {
  collectionTemplates: function collectionTemplates() {
    return CollectionNotImplemented;
  },
  storyTemplates: function storyTemplates() {
    return StoryNotImplemented;
  }
};

var ImageGalleryElement = function ImageGalleryElement(_ref) {
  var className = _ref.className,
      imageAspectRatio = _ref.imageAspectRatio,
      defaultWidth = _ref.defaultWidth,
      _ref$element = _ref.element,
      element = _ref$element === void 0 ? {} : _ref$element,
      widths = _ref.widths,
      story = _ref.story,
      onClickHandler = _ref.onClickHandler;
  var images = element['story-elements'].map(function (image, index) {
    return React__default.createElement("figure", {
      "data-test-id": "story-element-image-container",
      key: image.id,
      className: "story-element-image-gallery__image-container ".concat(onClickHandler ? 'custom-cursor' : ''),
      onClick: function onClick() {
        return onClickHandler && onClickHandler(index);
      }
    }, React__default.createElement(ResponsiveImage, {
      slug: image["image-s3-key"],
      metadata: image["metadata"],
      aspectRatio: imageAspectRatio ? imageAspectRatio : [1, 1],
      defaultWidth: defaultWidth ? defaultWidth : 480,
      widths: widths ? widths : [250, 480, 640],
      imgParams: {
        auto: ['format', 'compress']
      },
      className: className ? className : 'story-element-image-gallery__image',
      alt: image.title || story.headline
    }));
  });
  return React__default.createElement("div", {
    className: "story-element-image-gallery",
    "data-test-id": "story-element-image-gallery"
  }, images);
};

function loadMoreWrapper(Component, data, enableLoadMoreButton, slug, numStoriesToLoad) {
  return !enableLoadMoreButton ? React__default.createElement(Component, data) : React__default.createElement(LoadMoreCollectionStories, {
    template: Component,
    collectionSlug: slug,
    params: {
      'item-type': 'story'
    },
    data: data,
    numStoriesToLoad: numStoriesToLoad
  });
}

function lazyLoadWrapper(component, _ref) {
  var _ref$lazy_load_images = _ref.lazy_load_images,
      lazyLoadImages = _ref$lazy_load_images === void 0 ? false : _ref$lazy_load_images;
  return !lazyLoadImages ? component : React__default.createElement(LazyLoadImages, {}, component);
}

function clientSideLoadWrapper(component, _ref2) {
  var _ref2$client_side_onl = _ref2.client_side_only,
      clientSideOnly = _ref2$client_side_onl === void 0 ? false : _ref2$client_side_onl;
  return !clientSideOnly ? component : React__default.createElement(ClientSideOnly, {}, component);
}

function WrapCollectionComponent(Component) {
  return function (props) {
    if (!props.collection) {
      return React__default.createElement("div", null);
    }

    var associatedMetadata = props.collection["associated-metadata"] || {};
    var stories = collectionToStories(props.collection);

    if (associatedMetadata.initial_stories_load_count) {
      stories = stories.slice(0, associatedMetadata.initial_stories_load_count);
    }

    if (stories.length === 0) {
      return React__default.createElement("div", null);
    }

    var data = Object.assign({}, props, {
      stories: stories,
      associatedMetadata: associatedMetadata
    });
    var component = loadMoreWrapper(Component, data, associatedMetadata.enable_load_more_button, props.collection.slug, associatedMetadata.subsequent_stories_load_count || 10);
    return [clientSideLoadWrapper, lazyLoadWrapper].reduce(function (accumulator, currentElement) {
      return currentElement(accumulator, associatedMetadata);
    }, component);
  };
}

function wrapCollectionLayout(component) {
  return reactRedux.connect(function (state) {
    return {
      config: state.qt.config
    };
  })(WrapCollectionComponent(component));
}
function collectionToStories(collection) {
  return collection.items.filter(function (item) {
    return item.type === 'story';
  }).map(function (item) {
    return replaceWithAlternates(item.story);
  });
}

function replaceWithAlternates(story) {
  var alternates = get(story, ["alternative", "home", "default"]);
  if (!alternates) return story;
  return Object.assign({}, story, {
    headline: alternates.headline || story.headline,
    "hero-image-s3-key": alternates["hero-image"] ? alternates["hero-image"]["hero-image-s3-key"] : story["hero-image-s3-key"],
    "hero-image-metadata": alternates["hero-image"] ? alternates["hero-image"]["hero-image-metadata"] : story["hero-image-metadata"],
    "hero-image-caption": alternates["hero-image"] ? alternates["hero-image"]["hero-image-caption"] : story["hero-image-caption"],
    "hero-image-attribution": alternates["hero-image"] ? alternates["hero-image"]["hero-image-attribution"] : story["hero-image-attribution"]
  });
}

function LoadMoreButton(props) {
  return React__default.createElement("button", {
    className: props.className,
    onClick: props.onLoadMore,
    "data-test-id": "load-more"
  }, props.text);
}

LoadMoreButton.defaultProps = {
  className: 'load-more',
  onLoadMore: function onLoadMore() {},
  text: 'Load more'
};

var loadedMember = false;

var WithMemberBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(WithMemberBase, _React$Component);

  function WithMemberBase(props) {
    var _this;

    _classCallCheck(this, WithMemberBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WithMemberBase).call(this, props));
    _this.checkForMemberUpdated = _this.checkForMemberUpdated.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(WithMemberBase, [{
    key: "checkForMemberUpdated",
    value: function checkForMemberUpdated() {
      var _this2 = this;

      this.props.memberBeingLoaded();
      return getRequest('/api/v1/members/me').forbidden(function () {
        return _this2.props.memberUpdated(null);
      }).unauthorized(function () {
        return _this2.props.memberUpdated(null);
      }).json(function (_ref) {
        var member = _ref.member;
        return _this2.props.memberUpdated(member);
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (!loadedMember) {
        loadedMember = true;
        this.checkForMemberUpdated();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          member = _this$props.member,
          logout = _this$props.logout,
          children = _this$props.children,
          isLoading = _this$props.isLoading;
      return children({
        member: member,
        logout: logout,
        isLoading: isLoading,
        checkForMemberUpdated: this.checkForMemberUpdated
      });
    }
  }]);

  return WithMemberBase;
}(React__default.Component);

var WithMember =
/*#__PURE__*/
reactRedux.connect(mapStateToProps$9, mapDispatchToProps$6)(WithMemberBase);

function mapStateToProps$9(_ref2) {
  var member = _ref2.member,
      memberLoading = _ref2.memberLoading;
  return {
    member: member || null,
    // undefined on server side
    isLoading: memberLoading === true || memberLoading === undefined
  };
}

function mapDispatchToProps$6(dispatch) {
  return {
    memberBeingLoaded: function memberBeingLoaded() {
      return dispatch({
        type: MEMBER_BEING_LOADED
      });
    },
    memberUpdated: function memberUpdated(member) {
      return dispatch({
        type: MEMBER_UPDATED,
        member: member
      });
    },
    logout: function logout() {
      return getRequest('/api/logout').res(function () {
        return dispatch({
          type: MEMBER_UPDATED,
          member: null
        });
      });
    }
  };
}

function WithPreview(klazz, updateData) {
  return (
    /*#__PURE__*/
    function (_React$Component) {
      _inherits(WithPreviewWrapper, _React$Component);

      function WithPreviewWrapper(props) {
        var _this;

        _classCallCheck(this, WithPreviewWrapper);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(WithPreviewWrapper).call(this, props));
        _this.state = {
          story: null
        };
        return _this;
      }

      _createClass(WithPreviewWrapper, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          global.addEventListener("message", function (event) {
            if (event.data && event.data.action == 'reloadStory' && event.data.story) {
              _this2.setState({
                story: event.data.story
              });
            }
          });
        }
      }, {
        key: "render",
        value: function render() {
          if (!this.state.story) {
            return React__default.createElement("div", {
              style: {
                minHeight: 200
              }
            });
          }

          return React__default.createElement(klazz, Object.assign({}, this.props, {
            data: updateData(this.props.data, this.state.story)
          }));
        }
      }]);

      return WithPreviewWrapper;
    }(React__default.Component)
  );
}

function createSession(provider, token) {
  return postRequest("/api/login/".concat(provider), {
    token: token,
    'set-session': true
  }).json(function (r) {
    return r;
  });
}

var WithSocialLogin =
/*#__PURE__*/
function (_React$Component) {
  _inherits(WithSocialLogin, _React$Component);

  function WithSocialLogin(props) {
    var _this;

    _classCallCheck(this, WithSocialLogin);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WithSocialLogin).call(this, props));
    _this.serverSideLoginPath = "/login?auth-provider=".concat(_this.props.provider, "&remote-host=").concat(global.location && global.location.origin);
    return _this;
  }

  _createClass(WithSocialLogin, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.initialize();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return this.props.children({
        login: function login(props) {
          return _this2.props.socialLogin.call(_this2, props).then(function (token) {
            return createSession(_this2.props.provider, token);
          });
        },
        serverSideLoginPath: this.serverSideLoginPath
      });
    }
  }]);

  return WithSocialLogin;
}(React__default.Component);
WithSocialLogin.defaultProps = {
  initialize: function initialize() {},
  // function is rebound in WithSocialLogin
  socialLogin: function socialLogin() {
    window.location = this.serverSideLoginPath;
    return Promise.reject('EXPECT_REDIRECT');
  }
};

function loadFacebookSDK(appId) {
  if (global.FB) {
    return;
  }

  global.fbAsyncInit = global.fbAsyncInit || function () {
    global.FB.init({
      appId: appId,
      xfbml: true,
      version: 'v3.1'
    });
  };

  (function (d, s, id) {
    var js,
        fjs = d.getElementsByTagName(s)[0];

    if (d.getElementById(id)) {
      return;
    }

    js = d.createElement(s);
    js.id = id;
    js.src = "https://connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  })(document, 'script', 'facebook-jssdk');
}

function fbLogin(params) {
  return new Promise(function (resolve, reject) {
    return global.FB.login(function (response) {
      return response.status === 'connected' ? resolve({
        'access-token': response.authResponse.accessToken
      }) : reject('NOT_GRANTED');
    }, params);
  });
}

function fbVerifyEmailExists(token) {
  return new Promise(function (resolve, reject) {
    return global.FB.api('/me', {
      fields: 'email'
    }, function (response) {
      return response.email ? resolve(token) : reject('NO_EMAIL');
    });
  });
}

function loginWithFacebook() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      scope = _ref.scope,
      emailMandatory = _ref.emailMandatory;

  if (!global.FB) {
    return Promise.reject('NOT_LOADED');
  }

  return fbLogin({
    scope: scope
  }).then(function (token) {
    return emailMandatory ? fbVerifyEmailExists(token) : token;
  });
}

function WithFacebookLogin(_ref2) {
  var appId = _ref2.appId,
      children = _ref2.children,
      scope = _ref2.scope,
      emailMandatory = _ref2.emailMandatory;
  return React__default.createElement(WithSocialLogin, {
    provider: 'facebook',
    initialize: function initialize() {
      return loadFacebookSDK(appId);
    },
    socialLogin: function socialLogin() {
      return loginWithFacebook({
        scope: scope,
        emailMandatory: emailMandatory
      });
    },
    children: children
  });
}

var onScriptLoaded = function onScriptLoaded(clientId, scope) {
  global.gapi.load('client:auth2', function () {
    return global.gapi.client.init({
      clientId: clientId,
      scope: scope
    });
  });
};

var loginWithGoogle = function loginWithGoogle() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      emailMandatory = _ref.emailMandatory;

  if (!global.gapi || !global.gapi.client) {
    return Promise.reject("NOT_LOADED");
  }

  var GoogleAuth = global.gapi.auth2.getAuthInstance();

  if (!GoogleAuth) {
    return Promise.reject("NOT_LOADED");
  }

  return GoogleAuth.signIn().then(function (response) {
    return emailMandatory && !response.getBasicProfile().getEmail() ? Promise.reject('NO_EMAIL') : {
      'access-token': response.getAuthResponse().access_token
    };
  })["catch"](function () {
    return Promise.reject('NOT_GRANTED');
  });
};

var loadGoogleSDK = function loadGoogleSDK(clientId, scope) {
  if (global.gapi) {
    return;
  }

  var script = document.createElement('script');
  script.src = 'https://apis.google.com/js/api.js';
  script.async = true;
  script.defer = true;

  script.onload = function () {
    return onScriptLoaded(clientId, scope);
  };

  document.getElementsByTagName('body')[0].appendChild(script);
};

function WithGoogleLogin(_ref2) {
  var clientId = _ref2.clientId,
      children = _ref2.children,
      scope = _ref2.scope,
      emailMandatory = _ref2.emailMandatory;
  return React__default.createElement(WithSocialLogin, {
    provider: 'google',
    initialize: function initialize() {
      return loadGoogleSDK(clientId, scope);
    },
    socialLogin: function socialLogin() {
      return loginWithGoogle({
        emailMandatory: emailMandatory
      });
    },
    children: children
  });
}

function WithTwitterLogin(_ref) {
  var clientId = _ref.clientId,
      children = _ref.children,
      scope = _ref.scope,
      emailMandatory = _ref.emailMandatory;
  return React__default.createElement(WithSocialLogin, {
    provider: 'twitter',
    children: children
  });
}

var loadLinkedInSdk = function loadLinkedInSdk(clientKey, scope) {
  if (global.IN) {
    return;
  }

  var script = document.createElement('script');
  script.src = '//platform.linkedin.com/in.js';
  script.type = 'text/javascript';
  script.async = true;
  script.defer = true;
  script.innerHTML = "\n  api_key: ".concat(clientKey, "\n");
  document.getElementsByTagName('body')[0].appendChild(script);
};

var loginWithLinkedIn = function loginWithLinkedIn(_ref) {
  var emailMandatory = _ref.emailMandatory;

  if (!global.IN || !global.IN.User) {
    return Promise.reject("NOT_LOADED");
  }

  return new Promise(function (resolve, reject) {
    IN.User.authorize(function (e) {
      if (IN.User.isAuthorized()) {
        resolve({
          "access-token": IN.ENV.auth.oauth_token,
          client: true
        });
      } else {
        reject("NOT_GRANTED");
      }
    });
  });
};

function WithLinkedInLogin(_ref2) {
  var clientKey = _ref2.clientKey,
      children = _ref2.children,
      scope = _ref2.scope,
      emailMandatory = _ref2.emailMandatory;
  return React__default.createElement(WithSocialLogin, {
    provider: 'linkedin',
    initialize: function initialize() {
      return loadLinkedInSdk(clientKey, scope);
    },
    socialLogin: function socialLogin() {
      return loginWithLinkedIn({
        emailMandatory: emailMandatory
      });
    },
    children: children
  });
}

var UpdateOnInterval =
/*#__PURE__*/
function (_Component) {
  _inherits(UpdateOnInterval, _Component);

  function UpdateOnInterval(props) {
    var _this;

    _classCallCheck(this, UpdateOnInterval);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(UpdateOnInterval).call(this, props));
    _this.fetchIntervalIndex = -1;
    _this.state = {
      data: _this.props.initData
    };
    return _this;
  }

  _createClass(UpdateOnInterval, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.registerInterval();
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      this.unregisterInterval();
    }
  }, {
    key: "registerInterval",
    value: function registerInterval() {
      var _this2 = this;

      this.fetchIntervalIndex = setInterval(function () {
        return _this2.setData();
      }, this.props.interval);
    }
  }, {
    key: "unregisterInterval",
    value: function unregisterInterval() {
      clearInterval(this.fetchIntervalIndex);
    }
  }, {
    key: "setData",
    value: function () {
      var _setData =
      /*#__PURE__*/
      _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee() {
        var data;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(typeof this.props.dataLoader === 'function')) {
                  _context.next = 6;
                  break;
                }

                _context.next = 3;
                return this.props.dataLoader();

              case 3:
                _context.t0 = _context.sent;
                _context.next = 7;
                break;

              case 6:
                _context.t0 = {};

              case 7:
                data = _context.t0;
                this.setState({
                  data: data
                });

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function setData() {
        return _setData.apply(this, arguments);
      }

      return setData;
    }()
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      var data = this.state.data;
      return children({
        data: data
      });
    }
  }]);

  return UpdateOnInterval;
}(React.Component);
UpdateOnInterval.defaultProps = {
  interval: 30000,
  initData: {}
};

var AccessTypeBase =
/*#__PURE__*/
function (_Component) {
  _inherits(AccessTypeBase, _Component);

  function AccessTypeBase() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AccessTypeBase);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccessTypeBase)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "loadScript", function (callback) {
      var accessTypeKey = get(_this.props, ['accessTypeKey']);
      var isStaging = get(_this.props, ['isStaging']);
      var enableAccesstype = get(_this.props, ['enableAccesstype']);

      if (!enableAccesstype) {
        return false;
      }

      if (accessTypeKey && !global.AccessType && global.document) {
        var accessTypeScript = document.createElement('script');
        var accessTypeHost = "https://www.accesstype.com/frontend/accesstype.js?key=".concat(accessTypeKey);

        if (isStaging) {
          accessTypeHost = "https://staging.accesstype.com/frontend/accesstype.js?key=".concat(accessTypeKey, "&env=sandbox");
        }

        accessTypeScript.setAttribute("src", accessTypeHost);
        accessTypeScript.setAttribute("data-accessType-script", "1");
        accessTypeScript.async = 1;

        accessTypeScript.onload = function () {
          return callback();
        };

        document.body.appendChild(accessTypeScript);
        return true;
      }

      global.AccessType && callback();
      return true;
    });

    _defineProperty(_assertThisInitialized(_this), "setUser",
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee(emailAddress, mobileNumber) {
        var _ref2, error, user;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (global.AccessType) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", {});

              case 2:
                _context.next = 4;
                return awaitHelper(global.AccessType.setUser({
                  'emailAddress': emailAddress,
                  'mobileNumber': mobileNumber
                }));

              case 4:
                _ref2 = _context.sent;
                error = _ref2.error;
                user = _ref2.data;

                if (!error) {
                  _context.next = 10;
                  break;
                }

                console.warn("User context setting failed --> ", error);
                return _context.abrupt("return", error);

              case 10:
                return _context.abrupt("return", user);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());

    _defineProperty(_assertThisInitialized(_this), "getSubscription",
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    _regeneratorRuntime.mark(function _callee2() {
      var accessTypeKey, isStaging, accessTypeHost, _ref4, error, subscriptions;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              accessTypeKey = get(_this.props, ['accessTypeKey']);
              isStaging = get(_this.props, ['isStaging']);
              accessTypeHost = "https://www.accesstype.com/api/v1/subscription_groups.json?key=".concat(accessTypeKey);

              if (isStaging) {
                accessTypeHost = "https://staging.accesstype.com/api/v1/subscription_groups.json?key=".concat(accessTypeKey);
              }

              _context2.t0 = awaitHelper;
              _context2.next = 7;
              return global.fetch(accessTypeHost);

            case 7:
              _context2.t1 = _context2.sent.json();
              _context2.next = 10;
              return (0, _context2.t0)(_context2.t1);

            case 10:
              _ref4 = _context2.sent;
              error = _ref4.error;
              subscriptions = _ref4.data;

              if (!error) {
                _context2.next = 15;
                break;
              }

              return _context2.abrupt("return", {
                error: 'subscriptions fetch failed'
              });

            case 15:
              return _context2.abrupt("return", subscriptions["subscription_groups"] || []);

            case 16:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));

    _defineProperty(_assertThisInitialized(_this), "getPaymentOptions",
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    _regeneratorRuntime.mark(function _callee3() {
      var _ref6, error, paymentOptions;

      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (global.AccessType) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return", []);

            case 2:
              _context3.next = 4;
              return awaitHelper(global.AccessType.getPaymentOptions());

            case 4:
              _ref6 = _context3.sent;
              error = _ref6.error;
              paymentOptions = _ref6.data;

              if (!error) {
                _context3.next = 9;
                break;
              }

              return _context3.abrupt("return", {
                error: 'payment options fetch failed'
              });

            case 9:
              return _context3.abrupt("return", paymentOptions);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));

    _defineProperty(_assertThisInitialized(_this), "runSequentialCalls",
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    _regeneratorRuntime.mark(function _callee4() {
      var user;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return _this.setUser(_this.props.email, _this.props.phone);

            case 2:
              user = _context4.sent;

              if (user) {
                try {
                  Promise.all([_this.getSubscription(), _this.getPaymentOptions()]).then(function (_ref8) {
                    var _ref9 = _slicedToArray(_ref8, 2),
                        subscriptionGroups = _ref9[0],
                        paymentOptions = _ref9[1];

                    reactRedux.batch(function () {
                      _this.props.subscriptionGroupLoaded(subscriptionGroups);

                      _this.props.paymentOptionsLoaded(paymentOptions);
                    });
                  });
                } catch (e) {
                  console.log("Subscription / payments failed", e);
                }
              }

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));

    _defineProperty(_assertThisInitialized(_this), "getSubscriptionForUser",
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    _regeneratorRuntime.mark(function _callee5() {
      var _ref11, error, _ref11$data, subscriptions;

      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (global.AccessType) {
                _context5.next = 2;
                break;
              }

              return _context5.abrupt("return", {});

            case 2:
              _context5.next = 4;
              return awaitHelper(global.AccessType.getSubscriptions());

            case 4:
              _ref11 = _context5.sent;
              error = _ref11.error;
              _ref11$data = _ref11.data;
              subscriptions = _ref11$data === void 0 ? [] : _ref11$data;

              if (!error) {
                _context5.next = 10;
                break;
              }

              return _context5.abrupt("return", error);

            case 10:
              return _context5.abrupt("return", subscriptions);

            case 11:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));

    _defineProperty(_assertThisInitialized(_this), "initAccessType", function () {
      try {
        _this.loadScript(function () {
          return _this.runSequentialCalls();
        });
      } catch (e) {
        console.warn("Accesstype load fail", e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "initRazorPayPayment", function (selectedPlan) {
      if (!selectedPlan) {
        console.warn('Razor pay needs a plan');
        return false;
      }

      var paymentOptions = _this.props.paymentOptions;
      var id = selectedPlan.id,
          title = selectedPlan.title,
          description = selectedPlan.description,
          priceCents = selectedPlan['price_cents'],
          priceCurrency = selectedPlan['price_currency'],
          durationLength = selectedPlan['duration_length'],
          durationUnit = selectedPlan['duration_unit'];
      var paymentType = get(selectedPlan, ["recurring"]) ? "razorpay_recurring" : "razorpay";
      var paymentObject = {
        type: 'standard',
        plan: {
          id: id,
          title: title,
          description: description,
          price_cents: priceCents,
          price_currency: priceCurrency,
          duration_length: durationLength,
          duration_unit: durationUnit
        },
        payment: {
          payment_type: paymentType,
          amount_cents: priceCents,
          amount_currency: priceCurrency
        }
      };
      return paymentOptions.razorpay.proceed(paymentObject);
    });

    _defineProperty(_assertThisInitialized(_this), "pingBackMeteredStory",
    /*#__PURE__*/
    function () {
      var _ref12 = _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee6(assetId, accessData) {
        var stringData, meteredBody, _ref13, data, error;

        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                stringData = JSON.stringify(accessData);

                if (!(global.navigator && global.navigator.sendBeacon)) {
                  _context6.next = 4;
                  break;
                }

                global.navigator.sendBeacon("/api/access/v1/stories/".concat(assetId, "/pingback"), stringData);
                return _context6.abrupt("return", true);

              case 4:
                meteredBody = {
                  method: "POST",
                  headers: {
                    "Content-Type": "text/plain"
                  },
                  body: stringData
                };
                _context6.t0 = awaitHelper;
                _context6.next = 8;
                return global.fetch("/api/access/v1/stories/".concat(assetId, "/pingback"), meteredBody);

              case 8:
                _context6.t1 = _context6.sent.json();
                _context6.next = 11;
                return (0, _context6.t0)(_context6.t1);

              case 11:
                _ref13 = _context6.sent;
                data = _ref13.data;
                error = _ref13.error;
                return _context6.abrupt("return", true);

              case 15:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x3, _x4) {
        return _ref12.apply(this, arguments);
      };
    }());

    _defineProperty(_assertThisInitialized(_this), "checkAccess",
    /*#__PURE__*/
    function () {
      var _ref14 = _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee7(assetId) {
        var meteringParam, _ref15, error, accessData, accessById, granted, grantReason, _accessData$data, data;

        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (assetId) {
                  _context7.next = 3;
                  break;
                }

                console.warn('AssetId is required');
                return _context7.abrupt("return", false);

              case 3:
                _this.props.accessIsLoading(true);

                meteringParam = _this.props.disableMetering === true ? '?disable-meter=true' : '';
                _context7.t0 = awaitHelper;
                _context7.next = 8;
                return global.fetch("/api/access/v1/stories/".concat(assetId, "/access").concat(meteringParam));

              case 8:
                _context7.t1 = _context7.sent.json();
                _context7.next = 11;
                return (0, _context7.t0)(_context7.t1);

              case 11:
                _ref15 = _context7.sent;
                error = _ref15.error;
                accessData = _ref15.data;
                accessById = _defineProperty({}, assetId, accessData);

                _this.props.accessUpdated(accessById);

                _this.props.accessIsLoading(false);

                granted = accessData.granted, grantReason = accessData.grantReason, _accessData$data = accessData.data, data = _accessData$data === void 0 ? {} : _accessData$data;

                if (!meteringParam && granted && grantReason === "METERING") {
                  _this.pingBackMeteredStory(assetId, {
                    granted: granted,
                    grantReason: grantReason
                  });

                  _this.props.meterUpdated(data.numberRemaining || -1);
                }

                if (!error) {
                  _context7.next = 21;
                  break;
                }

                return _context7.abrupt("return", error);

              case 21:
                return _context7.abrupt("return", accessById);

              case 22:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x5) {
        return _ref14.apply(this, arguments);
      };
    }());

    return _this;
  }

  _createClass(AccessTypeBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.initAccessType();
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      return children({
        initAccessType: this.initAccessType,
        initRazorPayPayment: this.initRazorPayPayment,
        checkAccess: this.checkAccess,
        getSubscriptionForUser: this.getSubscriptionForUser,
        accessUpdated: this.props.accessUpdated,
        accessIsLoading: this.props.accessIsLoading
      });
    }
  }]);

  return AccessTypeBase;
}(React.Component);

var mapStateToProps$a = function mapStateToProps(state) {
  return {
    subscriptions: state.subscriptions || null,
    paymentOptions: state.paymentOptions || null
  };
};

var mapDispatchToProps$7 = function mapDispatchToProps(dispatch) {
  return {
    subscriptionGroupLoaded: function subscriptionGroupLoaded(subscriptions) {
      return dispatch({
        type: SUBSCRIPTION_GROUP_UPDATED,
        subscriptions: subscriptions
      });
    },
    paymentOptionsLoaded: function paymentOptionsLoaded(paymentOptions) {
      return dispatch({
        type: PAYMENT_OPTIONS_UPDATED,
        paymentOptions: paymentOptions
      });
    },
    accessIsLoading: function accessIsLoading(loading) {
      return dispatch({
        type: ACCESS_BEING_LOADED,
        loading: loading
      });
    },
    accessUpdated: function accessUpdated(access) {
      return dispatch({
        type: ACCESS_UPDATED,
        access: access
      });
    },
    meterUpdated: function meterUpdated(meterCount) {
      return dispatch({
        type: METER_UPDATED,
        meterCount: meterCount
      });
    }
  };
};

var AccessType =
/*#__PURE__*/
reactRedux.connect(mapStateToProps$a, mapDispatchToProps$7)(AccessTypeBase);

function getSize(sizeMap) {
  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var screenWidth = canUseDOM && get(window, ["screen", "width"], 440);
  if (!screenWidth) return [];
  if (screenWidth < 441) return sizeMap["mobile"];
  if (screenWidth < 992) return sizeMap["tablet"];
  return sizeMap["desktop"];
}

function AdbutlerAd(_ref) {
  var adtype = _ref.adtype,
      adbutlerConfig = _ref.adbutlerConfig,
      sizes = _ref.sizes;
  var _adbutlerConfig$publi = adbutlerConfig.publisherId,
      publisherId = _adbutlerConfig$publi === void 0 ? "" : _adbutlerConfig$publi,
      _adbutlerConfig$adtyp = adbutlerConfig[adtype],
      zoneId = _adbutlerConfig$adtyp === void 0 ? "" : _adbutlerConfig$adtyp;
  var sizeMap = sizes[adtype];
  var size = getSize(sizeMap);

  var _size = _slicedToArray(size, 2),
      _size$ = _size[0],
      width = _size$ === void 0 ? 0 : _size$,
      _size$2 = _size[1],
      height = _size$2 === void 0 ? 0 : _size$2;

  var src = "https://servedbyadbutler.com/adserve/;ID=".concat(publisherId, ";size=").concat(width, "x").concat(height, ";setID=").concat(zoneId, ";type=iframe;click=CLICK_MACRO_PLACEHOLDER");
  var hasSize = size.length;
  return React__default.createElement("div", {
    className: "adbutler-wrapper"
  }, hasSize ? React__default.createElement("iframe", {
    src: src,
    width: width,
    height: height,
    marginWidth: "0",
    marginHeight: "0",
    hspace: "0",
    vspace: "0",
    frameBorder: "0",
    scrolling: "no"
  }) : null);
}

function WithHostUrlBase(_ref) {
  var children = _ref.children,
      primaryHostUrl = _ref.primaryHostUrl,
      currentHostUrl = _ref.currentHostUrl;
  return children({
    primaryHostUrl: primaryHostUrl,
    currentHostUrl: currentHostUrl
  });
}

WithHostUrlBase.propTypes = {
  children: PropTypes__default.func.isRequired,
  primaryHostUrl: PropTypes__default.string,
  currentHostUrl: PropTypes__default.string
};
var WithHostUrl =
/*#__PURE__*/
reactRedux.connect(mapStateToProps$b, mapDispatchToProps$8)(WithHostUrlBase);

function mapStateToProps$b(_ref2) {
  var _ref2$qt = _ref2.qt,
      qt = _ref2$qt === void 0 ? {} : _ref2$qt;
  return {
    primaryHostUrl: qt.primaryHostUrl,
    currentHostUrl: qt.currentHostUrl
  };
}

function mapDispatchToProps$8(dispatch) {
  return {};
}

var WithLazy =
/*#__PURE__*/
function (_React$Component) {
  _inherits(WithLazy, _React$Component);

  function WithLazy(props) {
    var _this;

    _classCallCheck(this, WithLazy);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WithLazy).call(this, props));
    _this.state = {
      loaded: false
    };
    _this.observerRef = React__default.createRef();
    return _this;
  }

  _createClass(WithLazy, [{
    key: "render",
    value: function render() {
      if (this.state.loaded) {
        return this.props.children();
      } else {
        return React__default.createElement("div", {
          style: {
            height: this.props.height || 50
          },
          ref: this.observerRef
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.observer = new global.IntersectionObserver(function (entries, observer) {
        return _this2.observerCallback(entries, observer);
      }, {
        rootMargin: this.props.margin || "160px"
      });
      this.observer.observe(this.observerRef.current);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.observer.disconnect();
    }
  }, {
    key: "observerCallback",
    value: function observerCallback(entries, observer) {
      var _this3 = this;

      entries.forEach(function (entry) {
        if (entry.isIntersecting || entry.isIntersecting === undefined) {
          _this3.setState({
            loaded: true
          });

          observer.disconnect();
        }
      });
    }
  }]);

  return WithLazy;
}(React__default.Component);

function setToTrueOnEvent() {
  var events = Array.from(arguments);
  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var action = arguments.length > 1 ? arguments[1] : undefined;
    return state || events.includes(action.type);
  };
}

function breakingNewsReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case BREAKING_NEWS_UPDATED:
      return action.stories;

    default:
      return state;
  }
}

var breakingNewsLoadedReducer =
/*#__PURE__*/
setToTrueOnEvent(BREAKING_NEWS_UPDATED);
var clientSideRenderedReducer =
/*#__PURE__*/
setToTrueOnEvent(CLIENT_SIDE_RENDERED);

function pageLoadingReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case PAGE_LOADING:
      return true;

    case NAVIGATE_TO_PAGE:
      return false;

    case PAGE_FINISHED_LOADING:
      return false;

    default:
      return state;
  }
}

function hamburgerOpenedReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case HAMBURGER_CLICKED:
      return true;

    case HAMBURGER_CLOSED:
      return false;

    case NAVIGATE_TO_PAGE:
      return false;

    default:
      return state;
  }
}

function memberReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case MEMBER_UPDATED:
      return action.member;

    default:
      return state;
  }
}

function memberLoadingReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case MEMBER_BEING_LOADED:
      return true;

    case MEMBER_UPDATED:
      return false;

    default:
      return state;
  }
}

function subscriptionReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case SUBSCRIPTION_GROUP_UPDATED:
      return action.subscriptions;

    default:
      return state;
  }
}

function paymentOptionsReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case PAYMENT_OPTIONS_UPDATED:
      return action.paymentOptions;

    default:
      return state;
  }
}

function accessLoadingReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case ACCESS_BEING_LOADED:
      return action.loading;

    default:
      return state;
  }
}

function accessReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case ACCESS_UPDATED:
      return computeAccess(state, action);

    default:
      return state;
  }
}

function meteringReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case METER_UPDATED:
      return action.meterCount;

    default:
      return state;
  }
}

var ComponentReducers = {
  breakingNews: breakingNewsReducer,
  breakingNewsLoaded: breakingNewsLoadedReducer,
  clientSideRendered: clientSideRenderedReducer,
  pageLoading: pageLoadingReducer,
  hamburgerOpened: hamburgerOpenedReducer,
  member: memberReducer,
  memberLoading: memberLoadingReducer,
  subscriptions: subscriptionReducer,
  paymentOptions: paymentOptionsReducer,
  accessLoading: accessLoadingReducer,
  access: accessReducer,
  meteringCount: meteringReducer
};

exports.ACCESS_BEING_LOADED = ACCESS_BEING_LOADED;
exports.ACCESS_UPDATED = ACCESS_UPDATED;
exports.AccessType = AccessType;
exports.AdbutlerAd = AdbutlerAd;
exports.BREAKING_NEWS_UPDATED = BREAKING_NEWS_UPDATED;
exports.BreakingNews = BreakingNews;
exports.BreakingNewsItem = BreakingNewsItem;
exports.CLIENT_SIDE_RENDERED = CLIENT_SIDE_RENDERED;
exports.ClientSideOnly = ClientSideOnly;
exports.Collection = Collection;
exports.ComponentReducers = ComponentReducers;
exports.EagerLoadImages = EagerLoadImages;
exports.HAMBURGER_CLICKED = HAMBURGER_CLICKED;
exports.HAMBURGER_CLOSED = HAMBURGER_CLOSED;
exports.HamburgerButton = HamburgerButton;
exports.ImageGalleryElement = ImageGalleryElement;
exports.InfiniteScroll = InfiniteScroll;
exports.InfiniteStoryBase = InfiniteStoryBase;
exports.LazyCollection = LazyCollection;
exports.LazyLoadImages = LazyLoadImages;
exports.Link = Link;
exports.LoadMoreButton = LoadMoreButton;
exports.LoadMoreCollectionStories = LoadMoreCollectionStories;
exports.LoadMoreStoriesBase = LoadMoreStoriesBase;
exports.LoadMoreStoriesManager = LoadMoreStoriesManager;
exports.LoadingIndicator = LoadingIndicator;
exports.MEMBER_BEING_LOADED = MEMBER_BEING_LOADED;
exports.MEMBER_UPDATED = MEMBER_UPDATED;
exports.METER_UPDATED = METER_UPDATED;
exports.Menu = Menu;
exports.MenuItem = MenuItem;
exports.NAVIGATE_TO_PAGE = NAVIGATE_TO_PAGE;
exports.PAGE_FINISHED_LOADING = PAGE_FINISHED_LOADING;
exports.PAGE_LOADING = PAGE_LOADING;
exports.PAYMENT_OPTIONS_UPDATED = PAYMENT_OPTIONS_UPDATED;
exports.ResponsiveHeroImage = ResponsiveHeroImage;
exports.ResponsiveImage = ResponsiveImage;
exports.ResponsiveImageBase = ResponsiveImageBase;
exports.ResponsiveSource = ResponsiveSource;
exports.ReviewRating = ReviewRating;
exports.SERVICE_WORKER_UPDATED = SERVICE_WORKER_UPDATED;
exports.STORY_ELEMENT_TEMPLATES = STORY_ELEMENT_TEMPLATES;
exports.SUBSCRIPTION_GROUP_UPDATED = SUBSCRIPTION_GROUP_UPDATED;
exports.SearchBox = SearchBox;
exports.SearchBoxBase = SearchBoxBase;
exports.SearchPageBase = SearchPageBase;
exports.SocialShare = SocialShare;
exports.StoryElement = StoryElement;
exports.UpdateOnInterval = UpdateOnInterval;
exports.WithClientSideOnly = WithClientSideOnly;
exports.WithFacebookLogin = WithFacebookLogin;
exports.WithGoogleLogin = WithGoogleLogin;
exports.WithHostUrl = WithHostUrl;
exports.WithLazy = WithLazy;
exports.WithLinkedInLogin = WithLinkedInLogin;
exports.WithMember = WithMember;
exports.WithPreview = WithPreview;
exports.WithTwitterLogin = WithTwitterLogin;
exports.awaitHelper = awaitHelper;
exports.collectionToStories = collectionToStories;
exports.computeAccess = computeAccess;
exports.createDfpAdComponent = createDfpAdComponent;
exports.getAssociatedTemplate = getAssociatedTemplate;
exports.getQliticsSchema = getQliticsSchema;
exports.refreshDfpAds = refreshDfpAds;
exports.removeDuplicateStories = removeDuplicateStories;
exports.replaceAllStoriesInCollection = replaceAllStoriesInCollection;
exports.withError = withError;
exports.wrapCollectionLayout = wrapCollectionLayout;
