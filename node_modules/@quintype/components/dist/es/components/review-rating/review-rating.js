import React from "react";
import { StarIcon } from "./star-icon";
import PropTypes from "prop-types";

var ReviewRating = function ReviewRating(_ref) {
  var value = _ref.value,
      _ref$canShowEmptyRati = _ref.canShowEmptyRating,
      canShowEmptyRating = _ref$canShowEmptyRati === void 0 ? false : _ref$canShowEmptyRati,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 20 : _ref$size,
      _ref$activeColor = _ref.activeColor,
      activeColor = _ref$activeColor === void 0 ? "gold" : _ref$activeColor,
      _ref$inActiveColor = _ref.inActiveColor,
      inActiveColor = _ref$inActiveColor === void 0 ? "gray" : _ref$inActiveColor,
      _ref$count = _ref.count,
      count = _ref$count === void 0 ? 5 : _ref$count,
      _ref$showHalfStar = _ref.showHalfStar,
      showHalfStar = _ref$showHalfStar === void 0 ? true : _ref$showHalfStar,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? "review-rating" : _ref$className,
      _ref$activeSymbol = _ref.activeSymbol,
      activeSymbol = _ref$activeSymbol === void 0 ? null : _ref$activeSymbol,
      _ref$inActiveSymbol = _ref.inActiveSymbol,
      inActiveSymbol = _ref$inActiveSymbol === void 0 ? null : _ref$inActiveSymbol,
      _ref$halfActiveSymbol = _ref.halfActiveSymbol,
      halfActiveSymbol = _ref$halfActiveSymbol === void 0 ? null : _ref$halfActiveSymbol;
  if (!canShowEmptyRating && value < 0.1) return null;

  var activeComponent = function activeComponent(index) {
    return activeSymbol ? React.cloneElement(activeSymbol, {
      size: size,
      activeColor: activeColor,
      inActiveColor: inActiveColor,
      className: "".concat(className, "-symbol active"),
      key: "review-".concat(index)
    }) : React.createElement(StarIcon, {
      size: size,
      foregroundColor: activeColor,
      backgroundColor: activeColor,
      className: "".concat(className, "-symbol active"),
      key: "review-".concat(index),
      "data-test-id": "star-icon"
    });
  };

  var inActiveComponent = function inActiveComponent(index) {
    return inActiveSymbol ? React.cloneElement(inActiveSymbol, {
      size: size,
      activeColor: activeColor,
      inActiveColor: inActiveColor,
      className: "".concat(className, "-symbol inactive"),
      key: "review-".concat(index)
    }) : React.createElement(StarIcon, {
      size: size,
      foregroundColor: inActiveColor,
      backgroundColor: inActiveColor,
      className: "".concat(className, "-symbol inactive"),
      key: "review-".concat(index)
    });
  };

  var halfActiveComponent = function halfActiveComponent(index) {
    return halfActiveSymbol ? React.cloneElement(halfActiveSymbol, {
      size: size,
      activeColor: activeColor,
      inActiveColor: inActiveColor,
      className: "".concat(className, "-symbol half-active"),
      key: "review-".concat(index)
    }) : React.createElement(StarIcon, {
      size: size,
      foregroundColor: activeColor,
      backgroundColor: inActiveColor,
      className: "".concat(className, "-symbol half-active"),
      key: "review-".concat(index)
    });
  };

  var children = [];

  for (var i = 1; i <= count; i++) {
    if (i <= Math.floor(value)) {
      children.push(activeComponent(i));
    } else if (showHalfStar && value - Math.floor(value) > 0 && i === Math.round(value)) {
      children.push(halfActiveComponent(i));
    } else {
      children.push(inActiveComponent(i));
    }
  }

  return React.createElement("div", {
    className: className
  }, children);
};

export { ReviewRating };