import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React from "react";
import get from "lodash/get";

function renderTableBody(hasHeader, _ref) {
  var headerFields = _ref.headerFields,
      headerData = _ref.headerData;
  var headerRow = [];

  if (hasHeader) {
    headerRow = [React.createElement("thead", null, React.createElement("tr", null, headerFields.map(function (headerField) {
      return React.createElement("th", null, headerField);
    })))];
  } else {
    headerRow = [React.createElement("tr", null, headerFields.map(function (headerField) {
      return React.createElement("td", null, headerField);
    }))];
  }

  return headerRow.concat(headerData.map(function (data) {
    return React.createElement("tr", null, headerFields.map(function (headerField) {
      return React.createElement("td", null, data[headerField]);
    }));
  }));
}

export function TableView(_ref2) {
  var className = _ref2.className,
      hasHeader = _ref2.hasHeader,
      _ref2$tableModData = _ref2.tableModData,
      tableModData = _ref2$tableModData === void 0 ? {} : _ref2$tableModData;
  return React.createElement("table", {
    className: className
  }, renderTableBody(hasHeader, tableModData));
}
export var Table =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Table, _React$Component);

  function Table(props) {
    var _this;

    _classCallCheck(this, Table);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Table).call(this, props));
    _this.state = {
      tableModData: {
        headerFields: [],
        headerData: []
      }
    };
    return _this;
  }

  _createClass(Table, [{
    key: "formatData",
    value: function formatData(content) {
      var dataArray = content.split(/\n/);
      var headerRowData = get(dataArray, [0], '');
      var headerFields = headerRowData.split(',').map(function (headerValue) {
        return headerValue.trim();
      });
      var dataFields = dataArray.slice(1, dataArray.length - 1);
      var headerData = dataFields.map(function (dataField) {
        return dataField.split(',').reduce(function (acc, currEle, index) {
          acc[get(headerFields, [index], '').trim()] = currEle.trim();
          return acc;
        }, {});
      });
      this.setState({
        tableModData: {
          headerFields: headerFields,
          headerData: headerData
        }
      });
      return {
        headerFields: headerFields,
        headerData: headerData
      };
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var content = get(this.props, ['data', 'content']);
      this.formatData(content);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var prevContent = get(this.props, ['data', 'content']);
      var nextContent = get(nextProps, ['data', 'content']);

      if (prevContent !== nextContent) {
        this.formatData(nextContent);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var tableModData = this.state.tableModData;

      if (!get(tableModData, ['headerFields'], []).length > 0) {
        return null;
      }

      var className = "story-element-table-".concat(this.props.id);
      return React.createElement(this.props.tableComponent || TableView, {
        hasHeader: this.props.hasHeader,
        tableModData: tableModData,
        showPageSizeOptions: false,
        showPageJump: false,
        className: className
      });
    }
  }]);

  return Table;
}(React.Component);