import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from "react";
import getYouTubeID from 'get-youtube-id';
import { getQliticsSchema } from "../../utils";
var YouTube = null;
var loaderPromise = null;

function loadLibrary() {
  if (loaderPromise === null) {
    loaderPromise = import(
    /* webpackChunkName: "qtc-react-youtube" */
    "react-youtube").then(function (YT) {
      YouTube = YT["default"];
    })["catch"](function (err) {
      console.log('Failed to load react-youtube', err);
      return Promise.reject();
    });
  }

  return loaderPromise;
}

function isLibraryLoaded() {
  return YouTube !== null;
}

var StoryElementYoutube =
/*#__PURE__*/
function (_React$Component) {
  _inherits(StoryElementYoutube, _React$Component);

  function StoryElementYoutube(props) {
    var _this;

    _classCallCheck(this, StoryElementYoutube);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(StoryElementYoutube).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "triggerQlitics", function (action) {
      if (_this.props.disableAnalytics === true) return false;
      var _this$props = _this.props,
          _this$props$story = _this$props.story,
          story = _this$props$story === void 0 ? {} : _this$props$story,
          _this$props$card = _this$props.card,
          card = _this$props$card === void 0 ? {} : _this$props$card,
          _this$props$element = _this$props.element,
          element = _this$props$element === void 0 ? {} : _this$props$element;

      var qliticsData = _objectSpread({}, getQliticsSchema(story, card, element), {
        'story-element-action': action
      });

      if (global.qlitics) {
        global.qlitics('track', 'story-element-action', qliticsData);
      } else {
        global.qlitics = global.qlitics || function () {
          (qlitics.q = qlitics.q || []).push(arguments);
        };

        qlitics.qlitics.q.push('track', 'story-element-action', qliticsData);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onPlayCallback", function (event) {
      _this.triggerQlitics('play');

      _this.props.onPlay === "function" && _this.props.onPlay(event);
    });

    _defineProperty(_assertThisInitialized(_this), "onPauseCallback", function (event) {
      _this.triggerQlitics('pause');

      _this.props.onPause === "function" && _this.props.onPause(event);
    });

    _defineProperty(_assertThisInitialized(_this), "onEndCallback", function (event) {
      _this.triggerQlitics('end');

      _this.props.onEnd === "function" && _this.props.onEnd(event);
    });

    _this.opts = {
      playerVars: {
        autoplay: 0
      }
    };
    return _this;
  }

  _createClass(StoryElementYoutube, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this._isMounted = true;
      loadLibrary().then(function () {
        return _this2._isMounted && _this2.forceUpdate();
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;
    }
  }, {
    key: "render",
    value: function render() {
      if (isLibraryLoaded()) {
        return React.createElement(YouTube, {
          videoId: getYouTubeID(this.props.element.url),
          opts: this.opts,
          onPlay: this.onPlayCallback,
          onPause: this.onPauseCallback,
          onEnd: this.onEndCallback
        });
      }

      return React.createElement("div", null);
    }
  }]);

  return StoryElementYoutube;
}(React.Component);

export { StoryElementYoutube as default };