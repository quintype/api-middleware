import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import React from 'react';
import atob from 'atob';

function cloneScriptNode(node) {
  var script = document.createElement("script");
  script.text = node.innerHTML;

  for (var i = node.attributes.length - 1; i >= 0; i--) {
    script.setAttribute(node.attributes[i].name, node.attributes[i].value);
  }

  return script;
}

function replaceScriptNodes(node) {
  if (node.tagName === 'SCRIPT') {
    node.parentNode.replaceChild(cloneScriptNode(node), node);
    if (window.instgrm) window.instgrm.Embeds.process(); //Temporary fix for instagram element on live blog page.
  } else {
    var i = 0;
    var children = node.childNodes;

    while (i < children.length) {
      replaceScriptNodes(children[i++]);
    }
  }
}

var JSEmbed =
/*#__PURE__*/
function (_React$Component) {
  _inherits(JSEmbed, _React$Component);

  _createClass(JSEmbed, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return !(this.props.id === nextProps.id && this.props.embedJS === nextProps.embedJS);
    }
  }]);

  function JSEmbed(props) {
    var _this;

    _classCallCheck(this, JSEmbed);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(JSEmbed).call(this, props));
    _this.uniqueId = 'anagh';
    return _this;
  }

  _createClass(JSEmbed, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      replaceScriptNodes(this.JSEmbed);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      replaceScriptNodes(this.JSEmbed);
    }
  }, {
    key: "getEmbedJS",
    value: function getEmbedJS() {
      var embedjs = this.props.embedJS;
      return embedjs != null ? atob(embedjs) : null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return React.createElement("div", {
        ref: function ref(jsembed) {
          _this2.JSEmbed = jsembed;
        },
        dangerouslySetInnerHTML: {
          __html: this.getEmbedJS()
        }
      });
    }
  }]);

  return JSEmbed;
}(React.Component);

export { JSEmbed as default };