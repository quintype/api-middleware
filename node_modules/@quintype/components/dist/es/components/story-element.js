import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React from "react";
import classNames from "classnames";
import JSEmbed from "./story-elements/jsembed";
import StoryElementYoutube from "./story-elements/youtube";
import { ResponsiveImage } from "./responsive-image";
import Polltype from "./story-elements/polltype";
import { Table } from "./story-elements/table";
import { Link } from "./link";
import get from "lodash/get";
import { getQliticsSchema } from "../utils";

function StoryElementText(_ref) {
  var _ref$element = _ref.element,
      element = _ref$element === void 0 ? {} : _ref$element,
      externalLink = _ref.externalLink;
  var text = element.text || "";

  if (externalLink) {
    text = element.text.replace(/<a/g, '<a target="_blank"');
  }

  return React.createElement("div", {
    dangerouslySetInnerHTML: {
      __html: text
    }
  });
}

function StoryElementAlsoRead(_ref2) {
  var element = _ref2.element,
      story = _ref2.story,
      _ref2$alsoreadText = _ref2.alsoreadText,
      alsoreadText = _ref2$alsoreadText === void 0 ? "Also Read: " : _ref2$alsoreadText;
  var linkedStories = get(story, ["linked-stories"]);
  var linkedStoryId = get(element, ["metadata", "linked-story-id"]);
  var linkedStorySlug = get(linkedStories, [linkedStoryId, "slug"]);
  var storyUrl = "/".concat(linkedStorySlug);
  var linkProps = {
    className: "story-element-text-also-read__link",
    href: storyUrl
  };
  return React.createElement("h3", {}, React.createElement("span", {
    className: "story-element-text-also-read__label"
  }, alsoreadText), React.createElement(Link, linkProps, element.text));
}

function StoryElementImage(_ref3) {
  var element = _ref3.element,
      _ref3$story = _ref3.story,
      story = _ref3$story === void 0 ? {} : _ref3$story,
      imageWidths = _ref3.imageWidths,
      imageDefaultWidth = _ref3.imageDefaultWidth,
      _ref3$onClick = _ref3.onClick,
      onClick = _ref3$onClick === void 0 ? function () {} : _ref3$onClick;
  return React.createElement("figure", {}, React.createElement(ResponsiveImage, {
    slug: element["image-s3-key"],
    metadata: element["metadata"],
    aspectRatio: null,
    defaultWidth: imageDefaultWidth || 640,
    widths: imageWidths || [360, 640, 1200],
    imgParams: {
      auto: ["format", "compress"]
    },
    alt: element.title || story.headline,
    onClick: onClick
  }), React.createElement("div", {
    className: "story-element-caption-attribution-wrapper"
  }, element.title ? React.createElement("figcaption", {
    dangerouslySetInnerHTML: {
      __html: element.title
    },
    className: "story-element-image-title"
  }) : undefined, element["image-attribution"] ? React.createElement("figcaption", {
    dangerouslySetInnerHTML: {
      __html: element["image-attribution"]
    },
    className: "story-element-image-attribution"
  }) : undefined));
}

function StoryElementTitle(_ref4) {
  var element = _ref4.element;
  return React.createElement("h2", {}, element.text);
}

function StoryElementSoundCloud(_ref5) {
  var element = _ref5.element;
  return React.createElement("iframe", {
    src: element["embed-url"],
    width: "100%"
  });
}

function StoryElementJsembed(_ref6) {
  var element = _ref6.element;
  return React.createElement(JSEmbed, {
    embedJS: element["embed-js"],
    id: element["id"]
  });
}

function StoryElementPolltype(_ref7) {
  var element = _ref7.element;
  return React.createElement(Polltype, {
    id: element["polltype-id"]
  });
}

function StoryElementTable(_ref8) {
  var element = _ref8.element;
  return React.createElement(Table, {
    id: element.id,
    data: element.data,
    hasHeader: element.metadata["has-header"]
  });
}

function StoryElementFile(_ref9) {
  var element = _ref9.element;
  return React.createElement(React.Fragment, null, React.createElement("div", {
    className: "story-element-file__title"
  }, element["file-name"]), React.createElement("a", {
    className: "story-element-file__link",
    href: element.url,
    download: true
  }, "download"));
} // FIXME MISSING: composite
// TODO: Can also support various subtypes (though not needed potentially)


var DEFAULT_TEMPLATES = {
  text: StoryElementText,
  image: StoryElementImage,
  title: StoryElementTitle,
  "youtube-video": StoryElementYoutube,
  "soundcloud-audio": StoryElementSoundCloud,
  jsembed: StoryElementJsembed,
  polltype: StoryElementPolltype,
  table: StoryElementTable,
  "also-read": StoryElementAlsoRead,
  file: StoryElementFile
};

var StoryElementBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(StoryElementBase, _React$Component);

  function StoryElementBase(props) {
    var _this;

    _classCallCheck(this, StoryElementBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(StoryElementBase).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "initiateObserver", function () {
      if (_this.props.disableAnalytics === true) return false;
      var options = {
        root: null,
        rootMargin: "0px",
        threshold: 1.0
      };
      _this.observer = new IntersectionObserver(_this.observerCallback, options);

      _this.observer.observe(_this.storyElementRef);
    });

    _defineProperty(_assertThisInitialized(_this), "destroyObserver", function () {
      _this.observer && _this.observer.disconnect();
    });

    _defineProperty(_assertThisInitialized(_this), "observerCallback", function (entries) {
      entries.forEach(function (entry) {
        if (entry.isIntersecting) {
          _this.emitElementQlitics();
        }
      });
    });

    _this.observer = null;
    _this.storyElementRef = null;
    return _this;
  }

  _createClass(StoryElementBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.initiateObserver();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.destroyObserver();
    }
  }, {
    key: "template",
    value: function template() {
      var storyElement = this.props.element;
      var templates = Object.assign({}, DEFAULT_TEMPLATES, this.props.templates);
      return templates[storyElement.subtype] || templates[storyElement.type] || "div";
    }
  }, {
    key: "emitElementQlitics",
    value: function emitElementQlitics() {
      var _this$props = this.props,
          _this$props$story = _this$props.story,
          story = _this$props$story === void 0 ? {} : _this$props$story,
          _this$props$card = _this$props.card,
          card = _this$props$card === void 0 ? {} : _this$props$card,
          _this$props$element = _this$props.element,
          element = _this$props$element === void 0 ? {} : _this$props$element;

      if (global.qlitics) {
        global.qlitics("track", "story-element-view", getQliticsSchema(story, card, element));
      } else {
        global.qlitics = global.qlitics || function () {
          (qlitics.q = qlitics.q || []).push(arguments);
        };

        global.qlitics("track", "story-element-view", getQliticsSchema(story, card, element));
      }
    }
  }, {
    key: "storyElement",
    value: function storyElement() {
      return this.props.element;
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames,
          _this2 = this;

      var storyElement = this.props.element;
      var typeClassName = "story-element-".concat(storyElement.type);
      var subtypeClassName = "story-element-".concat(storyElement.type, "-").concat(storyElement.subtype);
      var storyElementTemplate = this.template();

      var _this$props2 = this.props,
          _this$props2$renderTe = _this$props2.renderTemplates,
          renderTemplates = _this$props2$renderTe === void 0 ? {} : _this$props2$renderTe,
          elementProps = _objectWithoutProperties(_this$props2, ["renderTemplates"]);

      var renderTemplate = renderTemplates[storyElement.subtype] || renderTemplates[storyElement.type];
      return React.createElement("div", {
        className: classNames((_classNames = {
          "story-element": true
        }, _defineProperty(_classNames, typeClassName, true), _defineProperty(_classNames, subtypeClassName, !!storyElement.subtype), _classNames)),
        ref: function ref(_ref10) {
          return _this2.storyElementRef = _ref10;
        }
      }, renderTemplate ? React.createElement(renderTemplate, _objectSpread({}, elementProps), React.createElement(storyElementTemplate, Object.assign({}, elementProps))) : React.createElement(storyElementTemplate, Object.assign({}, elementProps)));
    }
  }]);

  return StoryElementBase;
}(React.Component);

export var StoryElement =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(StoryElement, _React$Component2);

  function StoryElement(props) {
    var _this3;

    _classCallCheck(this, StoryElement);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(StoryElement).call(this, props));
    _this3.state = {
      crashed: false
    };
    return _this3;
  }

  _createClass(StoryElement, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error, stack) {
      this.setState({
        crashed: true,
        error: error
      });
      console && console.error("Caught Exception: ".concat(error && error.message));
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.crashed) {
        return React.createElement("div", {
          className: "story-element story-element-crashed"
        });
      } else {
        return React.createElement(StoryElementBase, this.props);
      }
    }
  }]);

  return StoryElement;
}(React.Component);
export var STORY_ELEMENT_TEMPLATES = DEFAULT_TEMPLATES;