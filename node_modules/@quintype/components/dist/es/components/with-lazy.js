import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React from 'react';
export var WithLazy =
/*#__PURE__*/
function (_React$Component) {
  _inherits(WithLazy, _React$Component);

  function WithLazy(props) {
    var _this;

    _classCallCheck(this, WithLazy);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WithLazy).call(this, props));
    _this.state = {
      loaded: false
    };
    _this.observerRef = React.createRef();
    return _this;
  }

  _createClass(WithLazy, [{
    key: "render",
    value: function render() {
      if (this.state.loaded) {
        return this.props.children();
      } else {
        return React.createElement("div", {
          style: {
            height: this.props.height || 50
          },
          ref: this.observerRef
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.observer = new global.IntersectionObserver(function (entries, observer) {
        return _this2.observerCallback(entries, observer);
      }, {
        rootMargin: this.props.margin || "160px"
      });
      this.observer.observe(this.observerRef.current);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.observer.disconnect();
    }
  }, {
    key: "observerCallback",
    value: function observerCallback(entries, observer) {
      var _this3 = this;

      entries.forEach(function (entry) {
        if (entry.isIntersecting || entry.isIntersecting === undefined) {
          _this3.setState({
            loaded: true
          });

          observer.disconnect();
        }
      });
    }
  }]);

  return WithLazy;
}(React.Component);