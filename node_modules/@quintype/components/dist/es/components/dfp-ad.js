import React from 'react';
import { AdSlot, DFPSlotsProvider, DFPManager } from 'react-dfp';
import { connect } from 'react-redux';
import { withError } from './with-error';

function DfpAdBase(_ref) {
  var defaultNetworkID = _ref.defaultNetworkID,
      config = _ref.config,
      collapseEmptyDivs = _ref.collapseEmptyDivs,
      targetingArguments = _ref.targetingArguments,
      adtype = _ref.adtype,
      lazyLoad = _ref.lazyLoad,
      singleRequest = _ref.singleRequest;
  var adConfig = config[adtype];
  return React.createElement(DFPSlotsProvider, {
    dfpNetworkId: defaultNetworkID,
    collapseEmptyDivs: collapseEmptyDivs,
    targetingArguments: targetingArguments,
    sizeMapping: adConfig.viewPortSizeMapping,
    lazyLoad: lazyLoad,
    singleRequest: singleRequest
  }, React.createElement(AdSlot, adConfig));
}

export function createDfpAdComponent(_ref2) {
  var defaultNetworkID = _ref2.defaultNetworkID,
      config = _ref2.config,
      targeting = _ref2.targeting,
      _ref2$collapseEmptyDi = _ref2.collapseEmptyDivs,
      collapseEmptyDivs = _ref2$collapseEmptyDi === void 0 ? true : _ref2$collapseEmptyDi,
      _ref2$lazyLoad = _ref2.lazyLoad,
      lazyLoad = _ref2$lazyLoad === void 0 ? true : _ref2$lazyLoad,
      _ref2$singleRequest = _ref2.singleRequest,
      singleRequest = _ref2$singleRequest === void 0 ? false : _ref2$singleRequest;
  return connect(function (state) {
    return {
      targetingArguments: targeting(state),
      defaultNetworkID: defaultNetworkID,
      config: config,
      collapseEmptyDivs: collapseEmptyDivs,
      lazyLoad: lazyLoad,
      singleRequest: singleRequest
    };
  }, function () {
    return {};
  })(withError(DfpAdBase));
}
export function refreshDfpAds(adSlots) {
  DFPManager.refresh(adSlots);
}