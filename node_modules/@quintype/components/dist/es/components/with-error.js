import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React from 'react';

function defaultErrorFn(props) {
  return React.createElement("span", {
    className: "qt-error"
  });
}

export function withError(clazz) {
  var errorFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultErrorFn;
  return (
    /*#__PURE__*/
    function (_React$Component) {
      _inherits(WithError, _React$Component);

      function WithError(props) {
        var _this;

        _classCallCheck(this, WithError);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(WithError).call(this, props));
        _this.state = {
          errored: false
        };
        return _this;
      }

      _createClass(WithError, [{
        key: "componentDidCatch",
        value: function componentDidCatch(e) {
          console && e && console.log("Caught Exception: ".concat(e.message || e));
          this.setState({
            errored: true
          });
        }
      }, {
        key: "errorContent",
        value: function errorContent() {
          try {
            return errorFn(this.props);
          } catch (e) {
            return defaultErrorFn(this.props);
          }
        }
      }, {
        key: "render",
        value: function render() {
          if (this.state.errored) {
            return this.errorContent();
          } else {
            return React.createElement(clazz, this.props);
          }
        }
      }]);

      return WithError;
    }(React.Component)
  );
}