import React from 'react';
import { connect } from 'react-redux';
import get from "lodash/get";
import { LoadMoreCollectionStories } from './load-more-stories-base';
import { LazyLoadImages } from './lazy-load-images';
import { ClientSideOnly } from './client-side-only';

function loadMoreWrapper(Component, data, enableLoadMoreButton, slug, numStoriesToLoad) {
  return !enableLoadMoreButton ? React.createElement(Component, data) : React.createElement(LoadMoreCollectionStories, {
    template: Component,
    collectionSlug: slug,
    params: {
      'item-type': 'story'
    },
    data: data,
    numStoriesToLoad: numStoriesToLoad
  });
}

function lazyLoadWrapper(component, _ref) {
  var _ref$lazy_load_images = _ref.lazy_load_images,
      lazyLoadImages = _ref$lazy_load_images === void 0 ? false : _ref$lazy_load_images;
  return !lazyLoadImages ? component : React.createElement(LazyLoadImages, {}, component);
}

function clientSideLoadWrapper(component, _ref2) {
  var _ref2$client_side_onl = _ref2.client_side_only,
      clientSideOnly = _ref2$client_side_onl === void 0 ? false : _ref2$client_side_onl;
  return !clientSideOnly ? component : React.createElement(ClientSideOnly, {}, component);
}

function WrapCollectionComponent(Component) {
  return function (props) {
    if (!props.collection) {
      return React.createElement("div", null);
    }

    var associatedMetadata = props.collection["associated-metadata"] || {};
    var stories = collectionToStories(props.collection);

    if (associatedMetadata.initial_stories_load_count) {
      stories = stories.slice(0, associatedMetadata.initial_stories_load_count);
    }

    if (stories.length === 0) {
      return React.createElement("div", null);
    }

    var data = Object.assign({}, props, {
      stories: stories,
      associatedMetadata: associatedMetadata
    });
    var component = loadMoreWrapper(Component, data, associatedMetadata.enable_load_more_button, props.collection.slug, associatedMetadata.subsequent_stories_load_count || 10);
    return [clientSideLoadWrapper, lazyLoadWrapper].reduce(function (accumulator, currentElement) {
      return currentElement(accumulator, associatedMetadata);
    }, component);
  };
}

export function wrapCollectionLayout(component) {
  return connect(function (state) {
    return {
      config: state.qt.config
    };
  })(WrapCollectionComponent(component));
}
export function collectionToStories(collection) {
  return collection.items.filter(function (item) {
    return item.type === 'story';
  }).map(function (item) {
    return replaceWithAlternates(item.story);
  });
}

function replaceWithAlternates(story) {
  var alternates = get(story, ["alternative", "home", "default"]);
  if (!alternates) return story;
  return Object.assign({}, story, {
    headline: alternates.headline || story.headline,
    "hero-image-s3-key": alternates["hero-image"] ? alternates["hero-image"]["hero-image-s3-key"] : story["hero-image-s3-key"],
    "hero-image-metadata": alternates["hero-image"] ? alternates["hero-image"]["hero-image-metadata"] : story["hero-image-metadata"],
    "hero-image-caption": alternates["hero-image"] ? alternates["hero-image"]["hero-image-caption"] : story["hero-image-caption"],
    "hero-image-attribution": alternates["hero-image"] ? alternates["hero-image"]["hero-image-attribution"] : story["hero-image-attribution"]
  });
}