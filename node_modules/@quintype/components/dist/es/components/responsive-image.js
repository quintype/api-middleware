import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React from "react";
import { connect } from "react-redux";
import { FocusedImage } from "quintype-js";
import { func } from 'prop-types';
import emptyWebGif from 'empty-web-gif';
import omit from '@babel/runtime/helpers/objectWithoutProperties';
var USED_PARAMS = ["imageCDN", "defaultWidth", "widths", "imgParams", "slug", "metadata", "aspectRatio", "reactTag", "eager"]; // Add the following CSS somewhere: img.qt-image { width: 100%; object-fit: cover; }

function hashString(string) {
  if (!string) return 0;
  var hash = 0,
      i,
      chr;

  for (i = 0; i < string.length; i++) {
    hash = (hash << 5) - hash + string.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return hash;
}

;

function responsiveProps(props) {
  var image = new FocusedImage(props.slug, props.metadata);

  function generatePath(size) {
    return "//" + props.imageCDN + "/" + image.path(props.aspectRatio, Object.assign({
      w: size
    }, props.imgParams));
  }

  return {
    src: generatePath(props.defaultWidth),
    srcSet: props.widths ? props.widths.map(function (size) {
      return "".concat(generatePath(size), " ").concat(size, "w");
    }).join(",") : undefined,
    key: hashString(props.slug)
  };
}

export var ResponsiveImageBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ResponsiveImageBase, _React$Component);

  function ResponsiveImageBase(props, context) {
    var _this;

    _classCallCheck(this, ResponsiveImageBase);

    if (process.env.NODE_ENV == 'development' && !props.alt && !props.reactTag) {
      global.console && global.console.warn("Image Found without an alt attribute: ".concat(responsiveProps(props).src));
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResponsiveImageBase).call(this, props, context));
    _this.state = {
      showImage: !_this.shouldLazyLoad()
    };
    return _this;
  }

  _createClass(ResponsiveImageBase, [{
    key: "shouldLazyLoad",
    value: function shouldLazyLoad() {
      if (this.props.eager === true) {
        return false;
      }

      if (this.context.lazyLoadEagerPredicate && this.context.lazyLoadEagerPredicate(this.props.eager)) {
        return false;
      }

      if (this.context.lazyLoadObserveImage && this.context.lazyLoadUnobserveImage) {
        return true;
      }

      return false;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var imageProps = this.state.showImage ? responsiveProps(this.props) : {
        src: emptyWebGif
      };
      return React.createElement(this.props.reactTag || "img", Object.assign(imageProps, omit(this.props, USED_PARAMS), {
        ref: function ref(dom) {
          return _this2.dom = dom;
        },
        className: this.props.className ? "qt-image ".concat(this.props.className) : 'qt-image'
      }));
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.shouldLazyLoad() && this.context.lazyLoadObserveImage(this.dom, this);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.shouldLazyLoad() && this.context.lazyLoadUnobserveImage(this.dom, this);
    }
  }, {
    key: "showImage",
    value: function showImage() {
      this.setState({
        showImage: true
      });
    }
  }]);

  return ResponsiveImageBase;
}(React.Component);

function mapStateToProps(state) {
  return {
    imageCDN: state.qt.config["cdn-image"]
  };
}

ResponsiveImageBase.contextTypes = {
  lazyLoadObserveImage: func,
  lazyLoadUnobserveImage: func,
  lazyLoadEagerPredicate: func
};
export var ResponsiveImage =
/*#__PURE__*/
connect(mapStateToProps, {})(ResponsiveImageBase);
export var ResponsiveSource = function ResponsiveSource(props) {
  return React.createElement(ResponsiveImage, Object.assign({
    reactTag: 'source',
    src: false,
    defaultWidth: 1024
  }, props));
};
export function ResponsiveHeroImage(props) {
  return React.createElement(ResponsiveImage, Object.assign({
    slug: props.story["hero-image-s3-key"],
    metadata: props.story["hero-image-metadata"],
    alt: props.story["headline"]
  }, omit(props, ['story'])));
}