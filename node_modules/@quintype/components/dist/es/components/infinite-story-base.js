import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React from "react";
import get from "lodash/get";
import { InfiniteScroll } from "./infinite-scroll.js";
import { removeDuplicateStories } from '../utils';
export var InfiniteStoryBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(InfiniteStoryBase, _React$Component);

  function InfiniteStoryBase(props) {
    var _this;

    _classCallCheck(this, InfiniteStoryBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(InfiniteStoryBase).call(this, props));
    _this.state = {
      moreItems: [],
      loading: false,
      pageNumber: 0,
      seenStoryIds: [props.data.story.id]
    };
    return _this;
  }

  _createClass(InfiniteStoryBase, [{
    key: "allItems",
    value: function allItems() {
      return [this.props.data].concat(this.state.moreItems);
    }
  }, {
    key: "onFocus",
    value: function onFocus(index) {
      var _this2 = this;

      var item = this.allItems()[index];
      global.app.maybeSetUrl("/" + item.story.slug, get(item, ['story', 'seo', 'meta-title'], item.story.headline));
      this.props.onItemFocus && this.props.onItemFocus(item, index);

      if (!this.state.seenStoryIds.includes(item.story.id)) {
        this.setState({
          seenStoryIds: this.state.seenStoryIds.concat([item.story.id])
        }, function () {
          _this2.props.onInitialItemFocus && _this2.props.onInitialItemFocus(item, index);
        });
      }
    }
  }, {
    key: "loadMore",
    value: function loadMore() {
      var _this3 = this;

      if (this.state.loading) return;
      var pageNumber = this.state.pageNumber;
      var story = get(this.props.data, ['story'], {});
      this.setState({
        loading: true,
        pageNumber: pageNumber + 1
      }, function () {
        _this3.props.loadItems(pageNumber, story, _this3.props.config).then(function (items) {
          _this3.setState({
            loading: false,
            moreItems: _this3.state.moreItems.concat(removeDuplicateStories(_this3.allItems(), items, function (item) {
              return item.story.id;
            }))
          });
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      return React.createElement(InfiniteScroll, {
        render: this.props.render,
        items: this.allItems(),
        loadNext: function loadNext() {
          return _this4.loadMore();
        },
        loadMargin: this.props.loadMargin,
        focusCallbackAt: this.props.focusCallbackAt || 20,
        onFocus: function onFocus(index) {
          return _this4.onFocus(index);
        }
      });
    }
  }]);

  return InfiniteStoryBase;
}(React.Component);