import React from 'react';
import { WithSocialLogin } from './with-social-login';

function loadFacebookSDK(appId) {
  if (global.FB) {
    return;
  }

  global.fbAsyncInit = global.fbAsyncInit || function () {
    global.FB.init({
      appId: appId,
      xfbml: true,
      version: 'v3.1'
    });
  };

  (function (d, s, id) {
    var js,
        fjs = d.getElementsByTagName(s)[0];

    if (d.getElementById(id)) {
      return;
    }

    js = d.createElement(s);
    js.id = id;
    js.src = "https://connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  })(document, 'script', 'facebook-jssdk');
}

function fbLogin(params) {
  return new Promise(function (resolve, reject) {
    return global.FB.login(function (response) {
      return response.status === 'connected' ? resolve({
        'access-token': response.authResponse.accessToken
      }) : reject('NOT_GRANTED');
    }, params);
  });
}

function fbVerifyEmailExists(token) {
  return new Promise(function (resolve, reject) {
    return global.FB.api('/me', {
      fields: 'email'
    }, function (response) {
      return response.email ? resolve(token) : reject('NO_EMAIL');
    });
  });
}

function loginWithFacebook() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      scope = _ref.scope,
      emailMandatory = _ref.emailMandatory;

  if (!global.FB) {
    return Promise.reject('NOT_LOADED');
  }

  return fbLogin({
    scope: scope
  }).then(function (token) {
    return emailMandatory ? fbVerifyEmailExists(token) : token;
  });
}

export function WithFacebookLogin(_ref2) {
  var appId = _ref2.appId,
      children = _ref2.children,
      scope = _ref2.scope,
      emailMandatory = _ref2.emailMandatory;
  return React.createElement(WithSocialLogin, {
    provider: 'facebook',
    initialize: function initialize() {
      return loadFacebookSDK(appId);
    },
    socialLogin: function socialLogin() {
      return loginWithFacebook({
        scope: scope,
        emailMandatory: emailMandatory
      });
    },
    children: children
  });
}