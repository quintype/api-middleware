import React from "react";
import { Link } from "./link";
import { connect } from "react-redux";

function MenuBase(_ref) {
  var children = _ref.children,
      className = _ref.className,
      itemClassName = _ref.itemClassName,
      items = _ref.items,
      currentUrl = _ref.currentUrl,
      slice = _ref.slice;
  items = items.slice.apply(items, slice);
  return React.createElement("ul", {
    className: className
  }, children, items.map(function (item, ix) {
    return React.createElement(MenuItem, {
      key: ix,
      item: item,
      className: itemClassName,
      currentUrl: currentUrl
    });
  }));
}

function mapStateToProps(state) {
  return {
    items: state.qt.config.layout.menu,
    currentUrl: state.qt.currentPath
  };
}

export var Menu =
/*#__PURE__*/
connect(mapStateToProps, function () {
  return {};
})(MenuBase);

function getRelativeUrl(url) {
  var _ref2 = new URL(url),
      pathname = _ref2.pathname,
      search = _ref2.search,
      hash = _ref2.hash;

  return "".concat(pathname).concat(search || "").concat(hash || "");
}

function getMenuItemBody(item, className, url, currentUrl) {
  switch (item['item-type']) {
    case 'section':
      return React.createElement(Link, {
        href: url,
        className: className
      }, item.title);

    default:
      return React.createElement("a", {
        href: item.url,
        className: className
      }, item.title);
  }
}

export function MenuItem(_ref3) {
  var item = _ref3.item,
      className = _ref3.className,
      currentUrl = _ref3.currentUrl;
  var url = getRelativeUrl(item.url);
  return React.createElement("li", null, getMenuItemBody(item, "".concat(className).concat(currentUrl == url ? " active" : ""), url));
}