import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
export var UpdateOnInterval =
/*#__PURE__*/
function (_Component) {
  _inherits(UpdateOnInterval, _Component);

  function UpdateOnInterval(props) {
    var _this;

    _classCallCheck(this, UpdateOnInterval);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(UpdateOnInterval).call(this, props));
    _this.fetchIntervalIndex = -1;
    _this.state = {
      data: _this.props.initData
    };
    return _this;
  }

  _createClass(UpdateOnInterval, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.registerInterval();
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      this.unregisterInterval();
    }
  }, {
    key: "registerInterval",
    value: function registerInterval() {
      var _this2 = this;

      this.fetchIntervalIndex = setInterval(function () {
        return _this2.setData();
      }, this.props.interval);
    }
  }, {
    key: "unregisterInterval",
    value: function unregisterInterval() {
      clearInterval(this.fetchIntervalIndex);
    }
  }, {
    key: "setData",
    value: function () {
      var _setData =
      /*#__PURE__*/
      _asyncToGenerator(
      /*#__PURE__*/
      _regeneratorRuntime.mark(function _callee() {
        var data;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(typeof this.props.dataLoader === 'function')) {
                  _context.next = 6;
                  break;
                }

                _context.next = 3;
                return this.props.dataLoader();

              case 3:
                _context.t0 = _context.sent;
                _context.next = 7;
                break;

              case 6:
                _context.t0 = {};

              case 7:
                data = _context.t0;
                this.setState({
                  data: data
                });

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function setData() {
        return _setData.apply(this, arguments);
      }

      return setData;
    }()
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      var data = this.state.data;
      return children({
        data: data
      });
    }
  }]);

  return UpdateOnInterval;
}(Component);
UpdateOnInterval.defaultProps = {
  interval: 30000,
  initData: {}
};