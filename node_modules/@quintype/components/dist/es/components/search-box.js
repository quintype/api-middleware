import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React, { Component } from 'react';
import PropTypes from "prop-types";
import { connect } from "react-redux";
export var SearchBoxBase =
/*#__PURE__*/
function (_Component) {
  _inherits(SearchBoxBase, _Component);

  function SearchBoxBase(props) {
    var _this;

    _classCallCheck(this, SearchBoxBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchBoxBase).call(this, props));
    _this.state = {
      query: _this.props.initValue || ""
    };
    return _this;
  }

  _createClass(SearchBoxBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.focus();
    }
  }, {
    key: "onSubmit",
    value: function onSubmit(e) {
      e.preventDefault();
      this.state.query && this.props.navigateTo("/search?q=".concat(encodeURIComponent(this.state.query)));
      this.props.onSubmitHandler && this.props.onSubmitHandler(this.state.query);
    }
  }, {
    key: "keyPress",
    value: function keyPress(e) {
      if (e.keyCode === 27) this.props.onEscape && this.props.onEscape();
    }
  }, {
    key: "focus",
    value: function focus() {
      this.textInput && this.textInput.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var Render = this.props.template || this.defaultTemplate;
      return React.createElement("form", {
        role: "search",
        action: "/search",
        onSubmit: function onSubmit(e) {
          return _this2.onSubmit(e);
        },
        className: this.props.className,
        ref: this.props.formRef
      }, React.createElement(Render, null, React.createElement("input", {
        type: "search",
        name: "q",
        placeholder: this.props.placeholder,
        value: this.state.query,
        onChange: function onChange(e) {
          return _this2.setState({
            query: e.target.value
          });
        },
        className: this.props.inputClassName,
        id: this.props.inputId,
        ref: function ref(input) {
          return _this2.textInput = input;
        },
        onKeyDown: function onKeyDown(e) {
          return _this2.keyPress(e);
        }
      })));
    }
  }], [{
    key: "defaultTemplate",
    value: function defaultTemplate(_ref) {
      var children = _ref.children;
      return children;
    }
  }]);

  return SearchBoxBase;
}(Component);
SearchBoxBase.protoTypes = {
  initValue: PropTypes.string,
  placeholder: PropTypes.string,
  className: PropTypes.string,
  formRef: PropTypes.any,
  inputClassName: PropTypes.string,
  inputId: PropTypes.string,
  template: PropTypes.element,
  onSubmitHandler: PropTypes.func,
  onEscape: PropTypes.func,
  navigateTo: PropTypes.func
};

var mapStateToProps = function mapStateToProps(state) {
  return {};
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    navigateTo: function navigateTo(url) {
      global.app.navigateToPage(dispatch, url);
    }
  };
};

export var SearchBox =
/*#__PURE__*/
connect(mapStateToProps, mapDispatchToProps)(SearchBoxBase);