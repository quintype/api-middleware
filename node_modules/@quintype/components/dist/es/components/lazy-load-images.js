import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import React from "react";
import { func } from 'prop-types'; // A non lazy intersection observer (just load all the images)

var FakeIntersectionObserver =
/*#__PURE__*/
function () {
  function FakeIntersectionObserver(callback) {
    _classCallCheck(this, FakeIntersectionObserver);

    this.callback = callback;
    console && console.warn && console.warn("IntersectionObserver was not found");
  }

  _createClass(FakeIntersectionObserver, [{
    key: "observe",
    value: function observe(dom) {
      this.callback([{
        isIntersecting: true,
        target: dom
      }]);
    }
  }, {
    key: "unobserve",
    value: function unobserve() {}
  }, {
    key: "disconnect",
    value: function disconnect() {}
  }]);

  return FakeIntersectionObserver;
}();

var IntersectionObserverWrapper =
/*#__PURE__*/
function () {
  function IntersectionObserverWrapper(callback) {
    _classCallCheck(this, IntersectionObserverWrapper);

    this.observedItems = [];
    this.callback = callback;
  }

  _createClass(IntersectionObserverWrapper, [{
    key: "start",
    value: function start(margin) {
      var _this = this;

      this.observer = new global.IntersectionObserver(function (entries) {
        return _this.onObservation(entries);
      }, {
        rootMargin: margin,
        threshold: 0
      });
      this.observedItems.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            dom = _ref2[0],
            component = _ref2[1];

        return _this.observer.observe(dom);
      });
    }
  }, {
    key: "onObservation",
    value: function onObservation(entries) {
      var _this2 = this;

      entries.filter(function (entry) {
        return entry.isIntersecting === undefined || entry.isIntersecting;
      }).map(function (entry) {
        return entry.target;
      }).forEach(function (dom) {
        var index = _this2.observedItems.findIndex(function (x) {
          return x[0] === dom;
        });

        if (index > -1) {
          var component = _this2.observedItems[index][1];

          _this2.callback(component);

          _this2.unregister(dom, component);
        }
      });
    }
  }, {
    key: "register",
    value: function register(dom, component) {
      this.observedItems.push([dom, component]);
      this.observer && this.observer.observe(dom);
    }
  }, {
    key: "unregister",
    value: function unregister(dom, component) {
      var index = this.observedItems.findIndex(function (x) {
        return x[0] === dom;
      });

      if (index > -1) {
        this.observedItems.splice(index, 1);
        this.observer && this.observer.unobserve(dom);
      }
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.observer.disconnect();
    }
  }]);

  return IntersectionObserverWrapper;
}();

var StubObserverWrapper =
/*#__PURE__*/
function () {
  function StubObserverWrapper(callback) {
    _classCallCheck(this, StubObserverWrapper);

    this.callback = callback;
  }

  _createClass(StubObserverWrapper, [{
    key: "register",
    value: function register(dom, component) {
      this.callback(component);
    }
  }, {
    key: "start",
    value: function start() {}
  }, {
    key: "unregister",
    value: function unregister() {}
  }, {
    key: "disconnect",
    value: function disconnect() {}
  }]);

  return StubObserverWrapper;
}();

export var LazyLoadImages =
/*#__PURE__*/
function (_React$Component) {
  _inherits(LazyLoadImages, _React$Component);

  function LazyLoadImages(props) {
    var _this3;

    _classCallCheck(this, LazyLoadImages);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(LazyLoadImages).call(this, props));

    var callback = function callback(component) {
      return component.showImage();
    };

    _this3.observerWrapper = global.IntersectionObserver ? new IntersectionObserverWrapper(callback) : new StubObserverWrapper(callback);
    return _this3;
  }

  _createClass(LazyLoadImages, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.observerWrapper.start(this.props.margin || "500px");
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.observerWrapper.disconnect();
    }
  }, {
    key: "getChildContext",
    value: function getChildContext() {
      var _this4 = this;

      return {
        lazyLoadObserveImage: function lazyLoadObserveImage(dom, component) {
          return dom && _this4.observerWrapper.register(dom, component);
        },
        lazyLoadUnobserveImage: function lazyLoadUnobserveImage(dom, component) {
          return dom && _this4.observerWrapper.unregister(dom, component);
        }
      };
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);

  return LazyLoadImages;
}(React.Component);
LazyLoadImages.childContextTypes = {
  lazyLoadObserveImage: func,
  lazyLoadUnobserveImage: func
};
export var EagerLoadImages =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(EagerLoadImages, _React$Component2);

  function EagerLoadImages() {
    _classCallCheck(this, EagerLoadImages);

    return _possibleConstructorReturn(this, _getPrototypeOf(EagerLoadImages).apply(this, arguments));
  }

  _createClass(EagerLoadImages, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        lazyLoadEagerPredicate: this.props.predicate || function () {
          return true;
        }
      };
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);

  return EagerLoadImages;
}(React.Component);
EagerLoadImages.childContextTypes = {
  lazyLoadEagerPredicate: func
};