import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React from "react";
import { connect } from "react-redux";
import { BREAKING_NEWS_UPDATED } from '../store/actions';
import { Link } from "./link";
import get from "lodash/get";
import { getRequest } from './api-client';

var BreakingNewsBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(BreakingNewsBase, _React$Component);

  function BreakingNewsBase() {
    _classCallCheck(this, BreakingNewsBase);

    return _possibleConstructorReturn(this, _getPrototypeOf(BreakingNewsBase).apply(this, arguments));
  }

  _createClass(BreakingNewsBase, [{
    key: "render",
    value: function render() {
      return React.createElement(this.props.view, this.props);
    }
  }, {
    key: "updateBreakingNews",
    value: function updateBreakingNews() {
      var _this = this;

      getRequest('/api/v1/breaking-news').json(function (response) {
        return _this.props.breakingNewsUpdated(response.stories);
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.interval = global.setInterval(function () {
        return _this2.updateBreakingNews();
      }, this.props.updateInterval || 60000);
      this.updateBreakingNews();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      global.clearInterval(this.interval);
    }
  }]);

  return BreakingNewsBase;
}(React.Component);

function mapStateToProps(state) {
  return {
    config: state.qt.config || {},
    breakingNews: state.breakingNews || [],
    breakingNewsLoaded: state.breakingNewsLoaded || false
  };
}

function mapDispatchToProps(dispatch) {
  return {
    breakingNewsUpdated: function breakingNewsUpdated(stories) {
      return dispatch({
        type: BREAKING_NEWS_UPDATED,
        stories: stories
      });
    }
  };
}

export var BreakingNews =
/*#__PURE__*/
connect(mapStateToProps, mapDispatchToProps)(BreakingNewsBase);
export function BreakingNewsItem(_ref) {
  var item = _ref.item,
      className = _ref.className;
  var linkedStorySlug = get(item, ['metadata', 'linked-story-slug']);

  if (linkedStorySlug) {
    return React.createElement(Link, {
      className: className,
      href: "/".concat(linkedStorySlug)
    }, item.headline);
  } else {
    return React.createElement("span", {
      className: className
    }, item.headline);
  }
}