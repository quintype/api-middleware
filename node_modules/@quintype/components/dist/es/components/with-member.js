import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import React from "react";
import { connect } from "react-redux";
import PropTypes from "prop-types";
import { getRequest } from './api-client';
import { MEMBER_UPDATED, MEMBER_BEING_LOADED } from '../store/actions';
var loadedMember = false;

var WithMemberBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(WithMemberBase, _React$Component);

  function WithMemberBase(props) {
    var _this;

    _classCallCheck(this, WithMemberBase);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WithMemberBase).call(this, props));
    _this.checkForMemberUpdated = _this.checkForMemberUpdated.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(WithMemberBase, [{
    key: "checkForMemberUpdated",
    value: function checkForMemberUpdated() {
      var _this2 = this;

      this.props.memberBeingLoaded();
      return getRequest('/api/v1/members/me').forbidden(function () {
        return _this2.props.memberUpdated(null);
      }).unauthorized(function () {
        return _this2.props.memberUpdated(null);
      }).json(function (_ref) {
        var member = _ref.member;
        return _this2.props.memberUpdated(member);
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (!loadedMember) {
        loadedMember = true;
        this.checkForMemberUpdated();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          member = _this$props.member,
          logout = _this$props.logout,
          children = _this$props.children,
          isLoading = _this$props.isLoading;
      return children({
        member: member,
        logout: logout,
        isLoading: isLoading,
        checkForMemberUpdated: this.checkForMemberUpdated
      });
    }
  }]);

  return WithMemberBase;
}(React.Component);

export var WithMember =
/*#__PURE__*/
connect(mapStateToProps, mapDispatchToProps)(WithMemberBase);

function mapStateToProps(_ref2) {
  var member = _ref2.member,
      memberLoading = _ref2.memberLoading;
  return {
    member: member || null,
    // undefined on server side
    isLoading: memberLoading === true || memberLoading === undefined
  };
}

function mapDispatchToProps(dispatch) {
  return {
    memberBeingLoaded: function memberBeingLoaded() {
      return dispatch({
        type: MEMBER_BEING_LOADED
      });
    },
    memberUpdated: function memberUpdated(member) {
      return dispatch({
        type: MEMBER_UPDATED,
        member: member
      });
    },
    logout: function logout() {
      return getRequest('/api/logout').res(function () {
        return dispatch({
          type: MEMBER_UPDATED,
          member: null
        });
      });
    }
  };
}