import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import React from "react";
import { connect } from "react-redux";

var ClientSideOnlyBase =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ClientSideOnlyBase, _React$Component);

  function ClientSideOnlyBase() {
    _classCallCheck(this, ClientSideOnlyBase);

    return _possibleConstructorReturn(this, _getPrototypeOf(ClientSideOnlyBase).apply(this, arguments));
  }

  _createClass(ClientSideOnlyBase, [{
    key: "render",
    value: function render() {
      if (this.props.clientSideRendered) {
        return React.createElement("div", {
          className: "client-side-only client-side-only-client"
        }, this.props.children);
      } else {
        return React.createElement(this.props.serverComponent || "div", Object.assign({
          className: "client-side-only client-side-only-server"
        }, this.props));
      }
    }
  }]);

  return ClientSideOnlyBase;
}(React.Component);

var defaultFallback = function defaultFallback() {
  return React.createElement("span", null);
};

function WithClientSideOnlyBase(_ref) {
  var _ref$clientSideRender = _ref.clientSideRendered,
      clientSideRendered = _ref$clientSideRender === void 0 ? false : _ref$clientSideRender,
      children = _ref.children;
  return children({
    clientSideRendered: clientSideRendered
  });
}

function mapStateToProps(state) {
  return {
    clientSideRendered: state.clientSideRendered
  };
}

function mapDispatchToProps(dispatch) {
  return {};
}

export var ClientSideOnly =
/*#__PURE__*/
connect(mapStateToProps, mapDispatchToProps)(ClientSideOnlyBase);
export var WithClientSideOnly =
/*#__PURE__*/
connect(mapStateToProps, mapDispatchToProps)(WithClientSideOnlyBase);